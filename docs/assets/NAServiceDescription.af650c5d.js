import{br as e,p as t,y as r,q as s,bN as o,co as a,cr as n,aV as i,cp as l,bh as p,a9 as u,cm as d,cq as c,r as f,h as y,U as v,cv as h,ct as m,cu as g,cw as T}from"./vendor.abf366c9.js";import{a as M}from"./GPMessage.292aec01.js";class w{constructor(e={}){this._options=e}toQueryParams(e){if(!e)return null;const t=e.toJSON(),r={};return Object.keys(t).forEach((e=>{const s=this._options[e];if(s){const o="boolean"!=typeof s&&s.name?s.name:e,a="boolean"!=typeof s&&s.getter?s.getter(t):t[e];null!=a&&(r[o]=(e=>{if(!Array.isArray(e))return!1;const[t]=e;return"number"==typeof t||"string"==typeof t})(a)?a.join(","):"object"==typeof a?JSON.stringify(a):a)}else r[e]=t[e]}),this),r}}function N(e){return new w(e)}const S=new e({0:"informative",1:"process-definition",2:"process-start",3:"process-stop",50:"warning",100:"error",101:"empty",200:"abort"});let R=class extends M{constructor(e){super(e),this.type=null}};t([r({type:String,json:{read:S.read,write:S.write}})],R.prototype,"type",void 0),R=t([s("esri.tasks.support.NAMessage")],R);var b=R;let j=class extends n{constructor(e){super(e),this.extent=null,this.features=null,this.geometryType="polyline",this.routeId=null,this.routeName=null,this.totalDriveTime=null,this.totalLength=null,this.totalTime=null}readFeatures(e,t){(e||[]).forEach((e=>{this._decompressFeatureGeometry(e,t.summary.envelope.spatialReference)}));const r=i.fromJSON(t.spatialReference);return e.map((e=>{const t=l.fromJSON(e),s=e.geometry&&e.geometry.spatialReference;return t.geometry&&!s&&(p(t.geometry).spatialReference=r),t.strings=e.strings,t.events=(e.events||[]).map((t=>{const r=new l({geometry:new u({x:t.point.x,y:t.point.y,z:t.point.z,hasZ:void 0!==t.point.z,spatialReference:e.geometry&&e.geometry.spatialReference}),attributes:{ETA:t.ETA,arriveTimeUTC:t.arriveTimeUTC}});return r.strings=t.strings,r})),t}))}get mergedGeometry(){if(!this.features)return null;const e=this.features.map((({geometry:e})=>p(e))),t=this.get("extent.spatialReference");return this._mergePolylinesToSinglePath(e,t)}get strings(){return this.features.map((({strings:e})=>e))}_decompressFeatureGeometry(e,t){e.geometry=this._decompressGeometry(e.compressedGeometry,t)}_decompressGeometry(e,t){let r=0,s=0,o=0,a=0;const n=[];let i,l,p,u,d,c,f,y,v=0,h=0,m=0;if(d=e.match(/((\+|\-)[^\+\-\|]+|\|)/g),d||(d=[]),0===parseInt(d[v],32)){v=2;const e=parseInt(d[v],32);v++,c=parseInt(d[v],32),v++,1&e&&(h=d.indexOf("|")+1,f=parseInt(d[h],32),h++),2&e&&(m=d.indexOf("|",h)+1,y=parseInt(d[m],32),m++)}else c=parseInt(d[v],32),v++;for(;v<d.length&&"|"!==d[v];){i=parseInt(d[v],32)+r,v++,r=i,l=parseInt(d[v],32)+s,v++,s=l;const e=[i/c,l/c];h&&(u=parseInt(d[h],32)+o,h++,o=u,e.push(u/f)),m&&(p=parseInt(d[m],32)+a,m++,a=p,e.push(p/y)),n.push(e)}return{paths:[n],hasZ:h>0,hasM:m>0,spatialReference:t}}_mergePolylinesToSinglePath(e,t){let r=[];(e||[]).forEach((e=>{e.paths.forEach((e=>{r=r.concat(e)}))}));const s=[];let o=[0,0];return r.forEach((e=>{e[0]===o[0]&&e[1]===o[1]||(s.push(e),o=e)})),new d({paths:[s]},t)}};t([r({type:o,json:{read:{source:"summary.envelope"}}})],j.prototype,"extent",void 0),t([r()],j.prototype,"features",void 0),t([a("features")],j.prototype,"readFeatures",null),t([r()],j.prototype,"geometryType",void 0),t([r({readOnly:!0})],j.prototype,"mergedGeometry",null),t([r()],j.prototype,"routeId",void 0),t([r()],j.prototype,"routeName",void 0),t([r({value:null,readOnly:!0})],j.prototype,"strings",null),t([r({json:{read:{source:"summary.totalDriveTime"}}})],j.prototype,"totalDriveTime",void 0),t([r({json:{read:{source:"summary.totalLength"}}})],j.prototype,"totalLength",void 0),t([r({json:{read:{source:"summary.totalTime"}}})],j.prototype,"totalTime",void 0),j=t([s("esri.tasks.support.DirectionsFeatureSet")],j);var k=j;let x=class extends c{constructor(e){super(e),this.directions=null,this.route=null,this.routeName=null,this.stops=null}};t([r({type:k,json:{write:!0}})],x.prototype,"directions",void 0),t([r({type:l,json:{write:!0}})],x.prototype,"route",void 0),t([r({type:String,json:{write:!0}})],x.prototype,"routeName",void 0),t([r({type:[l],json:{write:!0}})],x.prototype,"stops",void 0),x=t([s("esri.tasks.support.RouteResult")],x);var B=x;function O(e){return e&&n.fromJSON(e).features.map((e=>e))}let _=class extends c{constructor(e){super(e),this.barriers=null,this.messages=null,this.pointBarriers=null,this.polylineBarriers=null,this.polygonBarriers=null,this.routeResults=null}readPointBarriers(e,t){return O(t.barriers||t.pointBarriers)}readPolylineBarriers(e){return O(e)}readPolygonBarriers(e){return O(e)}};t([r({aliasOf:"pointBarriers"})],_.prototype,"barriers",void 0),t([r({type:[b]})],_.prototype,"messages",void 0),t([r({type:[l]})],_.prototype,"pointBarriers",void 0),t([a("pointBarriers",["barriers","pointBarriers"])],_.prototype,"readPointBarriers",null),t([r({type:[l]})],_.prototype,"polylineBarriers",void 0),t([a("polylineBarriers")],_.prototype,"readPolylineBarriers",null),t([r({type:[l]})],_.prototype,"polygonBarriers",void 0),t([a("polygonBarriers")],_.prototype,"readPolygonBarriers",null),t([r({type:[B]})],_.prototype,"routeResults",void 0),_=t([s("esri.tasks.support.RouteResultsContainer")],_);var I=_;function A(e,t,r,s){s[r]=[t.length,t.length+e.length],e.forEach((e=>{t.push(e.geometry)}))}function P(e,t){for(let r=0;r<t.length;r++){const s=e[t[r]];if(s&&s.length)for(const e of s)e.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}function E(e){const t=[],r=[],{directions:s=[],routes:{features:o=[],spatialReference:a=null}={},stops:{features:n=[],spatialReference:i=null}={},barriers:l,polygonBarriers:p,polylineBarriers:u,messages:d}=e.data,c="esri.tasks.RouteTask.NULL_ROUTE_NAME";let f,y,v=!0;const h=o&&a||n&&i||l&&l.spatialReference||p&&p.spatialReference||u&&u.spatialReference;s.forEach((e=>{t.push(f=e.routeName),r[f]={directions:e}})),o.forEach((e=>{-1===t.indexOf(f=e.attributes.Name)&&(t.push(f),r[f]={}),e.geometry&&(e.geometry.spatialReference=h),r[f].route=e})),n.forEach((e=>{y=e.attributes,-1===t.indexOf(f=y.RouteName||c)&&(t.push(f),r[f]={}),f!==c&&(v=!1),e.geometry&&(e.geometry.spatialReference=h),null==r[f].stops&&(r[f].stops=[]),r[f].stops.push(e)})),n.length>0&&!0===v&&(r[t[0]].stops=r[c].stops,delete r[c],t.splice(t.indexOf(c),1));const m=t.map((e=>(r[e].routeName=e===c?null:e,r[e])));return I.fromJSON({routeResults:m,pointBarriers:l,polygonBarriers:p,polylineBarriers:u,messages:d})}function U(e,t){for(let r=0;r<t.length;r++){const s=e[t[r]];if(s&&s.length)for(const e of s)if(f(e)&&e.hasZ)return!0}return!1}async function q(e){if(!e)throw new y("network-service:missing-url","Url to Network service is missing");const{data:t}=await v(e,{query:{f:"json"}});t.supportedTravelModes||(t.supportedTravelModes=[]);for(let a=0;a<t.supportedTravelModes.length;a++)t.supportedTravelModes[a].id||(t.supportedTravelModes[a].id=t.supportedTravelModes[a].itemId);const r=t.currentVersion>=10.4?async function(e){try{const{data:{supportedTravelModes:t,defaultTravelMode:r}}=await v(e+("/"===e[e.length-1]?"":"/")+"retrieveTravelModes",{query:{f:"json"}});return{supportedTravelModes:t,defaultTravelMode:r}}catch(t){throw new y("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:t})}}(e):async function(e){const{data:t}=await v(e.substring(0,e.indexOf("/rest/")+6)+"info",{query:{f:"json"}});if(!t||!t.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};e=t.owningSystemUrl;const{data:r}=await v(e+("/"===e[e.length-1]?"":"/")+"sharing/rest/portals/self",{query:{f:"json"}}),s=h("helperServices.routingUtilities.url",r);if(!s)return{supportedTravelModes:[],defaultTravelMode:null};const o=m(e),a=/\/solve$/.test(o.path)?"Route":/\/solveClosestFacility$/.test(o.path)?"ClosestFacility":"ServiceAreas",n=await v(s+("/"===s[s.length-1]?"":"/")+"GetTravelModes/execute",{query:{f:"json",serviceName:a}}),i=[];let l=null;if(n&&n.data&&n.data.results&&n.data.results.length){const e=n.data.results;for(const t of e)if("supportedTravelModes"===t.paramName){if(t.value&&t.value.features)for(const{attributes:e}of t.value.features)if(e){const t=JSON.parse(e.TravelMode);i.push(t)}}else"defaultTravelMode"===t.paramName&&(l=t.value)}return{supportedTravelModes:i,defaultTravelMode:l}}(e),{defaultTravelMode:s,supportedTravelModes:o}=await r;return t.defaultTravelMode=s,t.supportedTravelModes=o,t}const D=e=>{let r=class extends e{async getServiceDescription(e){return this._serviceDescriptionPromise||(this._serviceDescriptionPromise=this._fetchServiceDescription(e)),this._serviceDescriptionPromise}async _fetchServiceDescription(e){if(!this.url||!this.parsedUrl)throw new y("network-service:missing-url","Url to Network service is missing");const t=this.url,{data:r}=await v(t,{query:{f:"json",token:e}});r.supportedTravelModes||(r.supportedTravelModes=[]);for(let n=0;n<r.supportedTravelModes.length;n++)r.supportedTravelModes[n].id||(r.supportedTravelModes[n].id=r.supportedTravelModes[n].itemId);const s=r.currentVersion>=10.4?async function(e,t){try{const{data:{supportedTravelModes:r,defaultTravelMode:s}}=await v(e+("/"===e[e.length-1]?"":"/")+"retrieveTravelModes",{query:{f:"json",token:t}});return{supportedTravelModes:r,defaultTravelMode:s}}catch(r){throw new y("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:r})}}(t,e):async function(e,t){const{data:r}=await v(e.substring(0,e.indexOf("/rest/")+6)+"info",{query:{f:"json",token:t}});if(!r||!r.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};e=r.owningSystemUrl;const{data:s}=await v(e+("/"===e[e.length-1]?"":"/")+"sharing/rest/portals/self",{query:{f:"json",token:t}}),o=h("helperServices.routingUtilities.url",s);if(!o)return{supportedTravelModes:[],defaultTravelMode:null};const a=T(e),n=/\/solveClosestFacility$/.test(a.path)?"Route":/\/solveClosestFacility$/.test(a.path)?"ClosestFacility":"ServiceAreas",i=await v(o+("/"===o[o.length-1]?"":"/")+"GetTravelModes/execute",{query:{f:"json",serviceName:n,token:t}}),l=[];let p=null;if(i&&i.data&&i.data.results&&i.data.results.length){const e=i.data.results;for(const t of e)if("supportedTravelModes"===t.paramName){if(t.value&&t.value.features)for(const{attributes:e}of t.value.features)if(e){const t=JSON.parse(e.TravelMode);l.push(t)}}else"defaultTravelMode"===t.paramName&&(p=t.value)}return{supportedTravelModes:l,defaultTravelMode:p}}(t,e),{defaultTravelMode:o,supportedTravelModes:a}=await s;return r.defaultTravelMode=o,r.supportedTravelModes=a,r}_isInputGeometryZAware(e,t){for(let r=0;r<t.length;r++){const s=e[t[r]];if(s&&s.length)for(const e of s)if(f(e)&&e.hasZ)return!0}return!1}_dropZValuesOffInputGeometry(e,t){for(let r=0;r<t.length;r++){const s=e[t[r]];if(s&&s.length)for(const e of s)e.z=void 0}console.log("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}};return r=t([s("esri.tasks.mixins.NAServiceDescription")],r),r};let G=class extends(D(g)){};G=t([s("esri.tasks.mixins.NAServiceDescription")],G);export{b as a,D as b,k as c,q as d,E as i,A as l,P as n,N as o,U as u};
