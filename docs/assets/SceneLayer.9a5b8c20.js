var e=Object.defineProperty,t=Object.defineProperties,r=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,a=(t,r,s)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[r]=s,n=(e,t)=>{for(var r in t||(t={}))i.call(t,r)&&a(e,r,t[r]);if(s)for(var r of s(t))o.call(t,r)&&a(e,r,t[r]);return e},l=(e,s)=>t(e,r(s));import{p,y as d,q as y,cq as u,n as c,cA as h,cB as f,cC as g,fM as m,cD as v,cH as b,b_ as I,ha as w,r as L,cj as F,ca as j,cX as S,fR as O,t as _,h as P,d0 as T,U as E,gc as x,B as D,hb as A,hc as U,hd as R,he as q,co as Q,g1 as N,hf as k,g$ as C,hg as G,gd as V,hh as M,fT as $,fU as K,dG as W,hi as z,fV as B}from"./vendor.abf366c9.js";import{s as Z,l as H}from"./FetchAssociatedFeatureLayer.21039036.js";import{s as J,l as X,u as Y,m as ee}from"./I3SLayerDefinitions.01e6886d.js";import{R as te}from"./SceneService.1301f126.js";import"./resourceUtils.96ca9e07.js";let re=class extends u{constructor(){super(...arguments),this.name=null,this.field=null,this.currentRangeExtent=null,this.fullRangeExtent=null,this.type="rangeInfo"}};p([d({type:String,json:{read:!0,write:!0}})],re.prototype,"name",void 0),p([d({type:String,json:{read:!0,write:!0}})],re.prototype,"field",void 0),p([d({type:[Number],json:{read:!0,write:!0}})],re.prototype,"currentRangeExtent",void 0),p([d({type:[Number],json:{read:!0,write:!0}})],re.prototype,"fullRangeExtent",void 0),p([d({type:["rangeInfo"],readOnly:!0,json:{read:!1,write:!0}})],re.prototype,"type",void 0),re=p([y("esri.layers.support.RangeInfo")],re);var se=re;const ie=["3DObject","Point"],oe=c.getLogger("esri.layers.SceneLayer"),ae=B();let ne=class extends(te(h(f(g(m(v(b))))))){constructor(...e){super(...e),this.featureReduction=null,this.rangeInfos=null,this.operationalLayerType="ArcGISSceneServiceLayer",this.type="scene",this.fields=null,this.floorInfo=null,this.outFields=null,this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.definitionExpression=null,this.path=null,this.labelsVisible=!0,this.labelingInfo=null,this.legendEnabled=!0,this.cachedDrawingInfo={color:!1},this.editingEnabled=!0,this.popupEnabled=!0,this.popupTemplate=null,this.objectIdField=null,this.globalIdField=null,this._fieldUsageInfo={},this.screenSizePerspectiveEnabled=!0}normalizeCtorArgs(e,t){return"string"==typeof e?n({url:e},t):e}getField(e){return this.fieldsIndex.get(e)}getFieldDomain(e){const t=this.getField(e);return t&&t.domain?t.domain:null}get fieldsIndex(){return new I(this.fields)}readNodePages(e,t,r){return"Point"===t.layerType&&(e=t.pointNodePages),null==e||"object"!=typeof e?null:J.fromJSON(e,r)}set elevationInfo(e){this._set("elevationInfo",e),this.loaded&&this._validateElevationInfo()}get geometryType(){return pe[this.profile]||"mesh"}set renderer(e){w(e,this.fields),this._set("renderer",e)}readCachedDrawingInfo(e){return null!=e&&"object"==typeof e||(e={}),null==e.color&&(e.color=!1),e}get capabilities(){const e=L(this.associatedLayer)&&this.associatedLayer.capabilities?this.associatedLayer.capabilities:Z,{query:t,editing:{supportsGlobalId:r,supportsRollbackOnFailure:s,supportsUploadWithItemId:i},data:{supportsZ:o,supportsM:a,isVersioned:n},operations:{supportsEditing:l,supportsUpdate:p}}=e,d=e.operations.supportsChangeTracking;return{query:t,editing:{supportsGlobalId:r,supportsRollbackOnFailure:s,supportsGeometryUpdate:!1,supportsUploadWithItemId:i},data:{supportsZ:o,supportsM:a,isVersioned:n},operations:{supportsEditing:l&&d,supportsAdd:!1,supportsDelete:!1,supportsUpdate:p&&d}}}get defaultPopupTemplate(){return L(this.associatedLayer)||this.attributeStorageInfo?this.createPopupTemplate():null}readObjectIdField(e,t){return!e&&t.fields&&t.fields.some((t=>("esriFieldTypeOID"===t.type&&(e=t.name),!!e))),e||void 0}readGlobalIdField(e,t){return!e&&t.fields&&t.fields.some((t=>("esriFieldTypeGlobalID"===t.type&&(e=t.name),!!e))),e||void 0}get displayField(){return L(this.associatedLayer)?this.associatedLayer.displayField:null}readProfile(e,t){const r=t.store.profile;return null!=r&&le[r]?le[r]:(oe.error("Unknown or missing profile",{profile:r,layer:this}),"mesh-pyramids")}load(e){const t=L(e)?e.signal:null,r=this.loadFromPortal({supportedTypes:["Scene Service"]},e).catch(F).then((()=>this._fetchService(t))).then((()=>Promise.all([this._fetchIndexAndUpdateExtent(this.nodePages,t),this._setAssociatedFeatureLayer(t)]))).then((()=>this._validateElevationInfo())).then((()=>this._applyAssociatedLayerOverrides())).then((()=>this._populateFieldUsageInfo())).then((()=>j(this,{origin:"service"},t))).then((()=>w(this.renderer,this.fields)));return this.addResolvingPromise(r),Promise.resolve(this)}createQuery(){const e=new S;return"mesh"!==this.geometryType&&(e.returnGeometry=!0,e.returnZ=!0),e.where=this.definitionExpression||"1=1",e.sqlFormat="standard",e}queryExtent(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryExtent(e||this.createQuery(),t)))}queryFeatureCount(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryFeatureCount(e||this.createQuery(),t)))}queryFeatures(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryFeatures(e||this.createQuery(),t))).then((e=>{if(e&&e.features)for(const t of e.features)t.layer=this,t.sourceLayer=this;return e}))}queryObjectIds(e,t){return this._getAssociatedLayerForQuery().then((r=>r.queryObjectIds(e||this.createQuery(),t)))}getFieldUsageInfo(e){const t={supportsLabelingInfo:!1,supportsRenderer:!1,supportsPopupTemplate:!1,supportsLayerQuery:!1};return this.loaded?this._fieldUsageInfo[e]||t:(oe.error("#getFieldUsageInfo()","Unavailable until layer is loaded"),t)}createPopupTemplate(e){return O(this,e)}_getAssociatedLayerForQuery(){const e=this.associatedLayer;return L(e)&&e.loaded?Promise.resolve(e):this._loadAssociatedLayerForQuery()}async _loadAssociatedLayerForQuery(){if(await this.load(),_(this.associatedLayer))throw new P("scenelayer:query-not-available","SceneLayer queries are not available without an associated feature layer",{layer:this});try{await this.associatedLayer.load()}catch(e){throw new P("scenelayer:query-not-available","SceneLayer associated feature layer could not be loaded",{layer:this,error:e})}return this.associatedLayer}hasCachedStatistics(e){return null!=this.statisticsInfo&&this.statisticsInfo.some((t=>t.name===e))}async queryCachedStatistics(e,t){if(await this.load(t),!this.statisticsInfo)throw new P("scenelayer:no-cached-statistics","Cached statistics are not available for this layer");const r=this.fieldsIndex.get(e);if(!r)throw new P("scenelayer:field-unexisting",`Field '${e}' does not exist on the layer`);for(const s of this.statisticsInfo)if(s.name===r.name){const e=T(this.parsedUrl.path,s.href);return E(e,{query:{f:"json"},responseType:"json",signal:t?t.signal:null}).then((e=>e.data))}throw new P("scenelayer:no-cached-statistics","Cached statistics for this attribute are not available")}async saveAs(e,t){return this._debouncedSaveOperations(1,l(n({},t),{getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"}),e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"scene"};return this._debouncedSaveOperations(0,e)}async applyEdits(e,t){const r=await import("./editingSupport.5f27cd15.js");if(await this.load(),_(this.associatedLayer))throw new P(`${this.type}-layer:not-editable`,"Service is not editable");return await this.associatedLayer.load(),r.applyEdits(this,this.associatedLayer.source,e,t)}on(e,t){return super.on(e,t)}validateLayer(e){if(e.layerType&&-1===ie.indexOf(e.layerType))throw new P("scenelayer:layer-type-not-supported","SceneLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new P("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new P("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});!function(e,t){let r=!1,s=!1;if(null==e)r=!0,s=!0;else{const i=t&&t.isGeographic;switch(e){case"east-north-up":case"earth-centered":r=!0,s=i;break;case"vertex-reference-frame":r=!0,s=!i;break;default:r=!1}}if(!r)throw new P("scenelayer:unsupported-normal-reference-frame","Normal reference frame is invalid.");if(!s)throw new P("scenelayer:incompatible-normal-reference-frame","Normal reference frame is incompatible with layer spatial reference.")}(this.normalReferenceFrame,this.spatialReference)}_getTypeKeywords(){const e=[];if("points"===this.profile)e.push("Point");else{if("mesh-pyramids"!==this.profile)throw new P("scenelayer:unknown-profile","SceneLayer:save() encountered an unknown SceneLayer profile: "+this.profile);e.push("3DObject")}return e}_populateFieldUsageInfo(){if(this._fieldUsageInfo={},this.fields)for(const e of this.fields){const t=!(!this.attributeStorageInfo||!this.attributeStorageInfo.some((t=>t.name===e.name))),r=!!(L(this.associatedLayer)&&this.associatedLayer.fields&&this.associatedLayer.fields.some((t=>t&&e.name===t.name))),s={supportsLabelingInfo:t,supportsRenderer:t,supportsPopupTemplate:t||r,supportsLayerQuery:r};this._fieldUsageInfo[e.name]=s}}_applyAssociatedLayerOverrides(){this._applyAssociatedLayerFieldsOverrides(),this._applyAssociatedLayerPopupOverrides()}_applyAssociatedLayerFieldsOverrides(){if(_(this.associatedLayer)||!this.associatedLayer.fields)return;let e=null;for(const t of this.associatedLayer.fields){const r=this.getField(t.name);r?(!r.domain&&t.domain&&(r.domain=t.domain.clone()),r.editable=t.editable,r.nullable=t.nullable,r.length=t.length):(e||(e=this.fields?this.fields.slice():[]),e.push(t.clone()))}e&&this._set("fields",e)}_applyAssociatedLayerPopupOverrides(){if(_(this.associatedLayer))return;const e=["popupTemplate","popupEnabled"],t=x(this);for(let r=0;r<e.length;r++){const s=e[r];this._buddyIsMoreImportant(s)&&(t.setDefaultOrigin(this.associatedLayer.originOf(s)),t.set(s,this.associatedLayer[s]),t.setDefaultOrigin("user"))}}async _setAssociatedFeatureLayer(e){if(-1===["mesh-pyramids","points"].indexOf(this.profile))return;const t=new H(this.parsedUrl,this.portalItem,e);try{this.associatedLayer=await t.fetch()}catch(r){D(r)||this._logWarningOnPopupEnabled()}}_logWarningOnPopupEnabled(){A(this,["popupTemplate","popupEnabled"],(()=>this.popupEnabled&&null!=this.popupTemplate)).then((()=>()=>{const e=`this SceneLayer: ${this.title}`;null==this.attributeStorageInfo?oe.warn(`Associated FeatureLayer could not be loaded and no binary attributes found. Popups will not work on ${e}`):oe.info(`Associated FeatureLayer could not be loaded. Falling back to binary attributes for Popups on ${e}`)}))}_buddyIsMoreImportant(e){if(_(this.associatedLayer))return!1;const t=this.originIdOf(e),r=this.associatedLayer.originIdOf(e);return null!=r&&r<=2?null==t||t<2:null!=r&&r<=3&&(null==t||t<3)}_validateElevationInfo(){const e=this.elevationInfo;e&&("mesh-pyramids"===this.profile&&"absolute-height"!==e.mode&&oe.warn(".elevationInfo=","Mesh scene layers only support absolute-height elevation mode"),e.featureExpressionInfo&&"0"!==e.featureExpressionInfo.expression&&oe.warn(".elevationInfo=","Scene layers do not support featureExpressionInfo"))}};p([d({types:{key:"type",base:U,typeMap:{selection:R}},json:{origins:{"web-scene":{name:"layerDefinition.featureReduction",write:!0},"portal-item":{name:"layerDefinition.featureReduction",write:!0}}}})],ne.prototype,"featureReduction",void 0),p([d({type:[se],json:{read:!1,origins:{"web-scene":{name:"layerDefinition.rangeInfos",write:!0},"portal-item":{name:"layerDefinition.rangeInfos",write:!0}}}})],ne.prototype,"rangeInfos",void 0),p([d({json:{read:!1}})],ne.prototype,"associatedLayer",void 0),p([d({type:["show","hide"]})],ne.prototype,"listMode",void 0),p([d({type:["ArcGISSceneServiceLayer"]})],ne.prototype,"operationalLayerType",void 0),p([d({json:{read:!1},readOnly:!0})],ne.prototype,"type",void 0),p([d(l(n({},ae.fields),{readOnly:!0,json:{read:!1,origins:{service:{read:!0}}}}))],ne.prototype,"fields",void 0),p([d({readOnly:!0})],ne.prototype,"fieldsIndex",null),p([d({type:q,json:{read:{source:"layerDefinition.floorInfo"},write:{target:"layerDefinition.floorInfo"}}})],ne.prototype,"floorInfo",void 0),p([d(ae.outFields)],ne.prototype,"outFields",void 0),p([d({type:J,readOnly:!0,json:{read:!1}})],ne.prototype,"nodePages",void 0),p([Q("service","nodePages",["nodePages","pointNodePages"])],ne.prototype,"readNodePages",null),p([d({type:[X],readOnly:!0})],ne.prototype,"materialDefinitions",void 0),p([d({type:[Y],readOnly:!0})],ne.prototype,"textureSetDefinitions",void 0),p([d({type:[ee],readOnly:!0})],ne.prototype,"geometryDefinitions",void 0),p([d({readOnly:!0})],ne.prototype,"serviceUpdateTimeStamp",void 0),p([d({readOnly:!0})],ne.prototype,"attributeStorageInfo",void 0),p([d({readOnly:!0})],ne.prototype,"statisticsInfo",void 0),p([d({type:String,json:{origins:{service:{read:!1,write:!1}},name:"layerDefinition.definitionExpression",write:!0}})],ne.prototype,"definitionExpression",void 0),p([d({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],ne.prototype,"path",void 0),p([d(N)],ne.prototype,"elevationInfo",null),p([d({type:String})],ne.prototype,"geometryType",null),p([d(k)],ne.prototype,"labelsVisible",void 0),p([d({type:[C],json:{origins:{service:{name:"drawingInfo.labelingInfo",read:{reader:G},write:!1}},name:"layerDefinition.drawingInfo.labelingInfo",read:{reader:G},write:!0}})],ne.prototype,"labelingInfo",void 0),p([d(V)],ne.prototype,"legendEnabled",void 0),p([d(M)],ne.prototype,"opacity",void 0),p([d({types:$,json:{origins:{service:{read:{source:"drawingInfo.renderer"}}},name:"layerDefinition.drawingInfo.renderer",write:!0},value:null})],ne.prototype,"renderer",null),p([d({json:{read:!1}})],ne.prototype,"cachedDrawingInfo",void 0),p([Q("service","cachedDrawingInfo")],ne.prototype,"readCachedDrawingInfo",null),p([d({readOnly:!0,json:{read:!1}})],ne.prototype,"capabilities",null),p([d({type:Boolean,json:{read:!1}})],ne.prototype,"editingEnabled",void 0),p([d(K)],ne.prototype,"popupEnabled",void 0),p([d({type:W,json:{name:"popupInfo",write:!0}})],ne.prototype,"popupTemplate",void 0),p([d({readOnly:!0,json:{read:!1}})],ne.prototype,"defaultPopupTemplate",null),p([d({type:String,json:{read:!1}})],ne.prototype,"objectIdField",void 0),p([Q("service","objectIdField",["objectIdField","fields"])],ne.prototype,"readObjectIdField",null),p([d({type:String,json:{read:!1}})],ne.prototype,"globalIdField",void 0),p([Q("service","globalIdField",["globalIdField","fields"])],ne.prototype,"readGlobalIdField",null),p([d({readOnly:!0,type:String,json:{read:!1}})],ne.prototype,"displayField",null),p([d({type:String,json:{read:!1}})],ne.prototype,"profile",void 0),p([Q("service","profile",["store.profile"])],ne.prototype,"readProfile",null),p([d({readOnly:!0,type:String,json:{origins:{service:{read:{source:"store.normalReferenceFrame"}}},read:!1}})],ne.prototype,"normalReferenceFrame",void 0),p([d(z)],ne.prototype,"screenSizePerspectiveEnabled",void 0),ne=p([y("esri.layers.SceneLayer")],ne);const le={"mesh-pyramids":"mesh-pyramids",meshpyramids:"mesh-pyramids","features-meshes":"mesh-pyramids",points:"points","features-points":"points",lines:"lines","features-lines":"lines",polygons:"polygons","features-polygons":"polygons"},pe={"mesh-pyramids":"mesh",points:"point",lines:"polyline",polygons:"polygon"};var de=ne;export default de;
