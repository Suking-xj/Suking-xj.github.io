import{a as e}from"./geometryEngineBase.80eb2415.js";import{hydratedAdapter as n}from"./hydrated.2f9273fc.js";import"./_commonjsHelpers.f2a458db.js";import"./vendor.d5722712.js";function r(e){return Array.isArray(e)?e[0].spatialReference:e&&e.spatialReference}function t(n){return e.extendedSpatialReferenceInfo(n)}function i(t,i){return e.clip(n,r(t),t,i)}function o(t,i){return e.cut(n,r(t),t,i)}function s(t,i){return e.contains(n,r(t),t,i)}function a(t,i){return e.crosses(n,r(t),t,i)}function u(t,i,o){return e.distance(n,r(t),t,i,o)}function c(t,i){return e.equals(n,r(t),t,i)}function f(t,i){return e.intersects(n,r(t),t,i)}function l(t,i){return e.touches(n,r(t),t,i)}function p(t,i){return e.within(n,r(t),t,i)}function d(t,i){return e.disjoint(n,r(t),t,i)}function g(t,i){return e.overlaps(n,r(t),t,i)}function m(t,i,o){return e.relate(n,r(t),t,i,o)}function x(t){return e.isSimple(n,r(t),t)}function h(t){return e.simplify(n,r(t),t)}function w(t,i=!1){return e.convexHull(n,r(t),t,i)}function y(t,i){return e.difference(n,r(t),t,i)}function A(t,i){return e.symmetricDifference(n,r(t),t,i)}function E(t,i){return e.intersect(n,r(t),t,i)}function R(t,i=null){return e.union(n,r(t),t,i)}function v(t,i,o,s,a,u){return e.offset(n,r(t),t,i,o,s,a,u)}function I(t,i,o,s=!1){return e.buffer(n,r(t),t,i,o,s)}function j(t,i,o,s,a,u){return e.geodesicBuffer(n,r(t),t,i,o,s,a,u)}function S(t,i,o=!0){return e.nearestCoordinate(n,r(t),t,i,o)}function V(t,i){return e.nearestVertex(n,r(t),t,i)}function H(t,i,o,s){return e.nearestVertices(n,r(t),t,i,o,s)}function b(e){return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?e.extent.center:null}function z(n,r,t){var i;if(null==n)throw new Error("Illegal Argument Exception");const o=n.spatialReference;if(null==(t=null!=(i=t)?i:b(n)))throw new Error("Illegal Argument Exception");const s=n.constructor.fromJSON(e.rotate(n,r,t));return s.spatialReference=o,s}function D(n,r){var t;if(null==n)throw new Error("Illegal Argument Exception");const i=n.spatialReference;if(null==(r=null!=(t=r)?t:b(n)))throw new Error("Illegal Argument Exception");const o=n.constructor.fromJSON(e.flipHorizontal(n,r));return o.spatialReference=i,o}function L(n,r){var t;if(null==n)throw new Error("Illegal Argument Exception");const i=n.spatialReference;if(null==(r=null!=(t=r)?t:b(n)))throw new Error("Illegal Argument Exception");const o=n.constructor.fromJSON(e.flipVertical(n,r));return o.spatialReference=i,o}function B(t,i,o,s){return e.generalize(n,r(t),t,i,o,s)}function J(t,i,o){return e.densify(n,r(t),t,i,o)}function N(t,i,o,s=0){return e.geodesicDensify(n,r(t),t,i,o,s)}function O(t,i){return e.planarArea(n,r(t),t,i)}function q(t,i){return e.planarLength(n,r(t),t,i)}function C(t,i,o){return e.geodesicArea(n,r(t),t,i,o)}function _(t,i,o){return e.geodesicLength(n,r(t),t,i,o)}export{I as buffer,i as clip,s as contains,w as convexHull,a as crosses,o as cut,J as densify,y as difference,d as disjoint,u as distance,c as equals,t as extendedSpatialReferenceInfo,D as flipHorizontal,L as flipVertical,B as generalize,C as geodesicArea,j as geodesicBuffer,N as geodesicDensify,_ as geodesicLength,E as intersect,f as intersects,x as isSimple,S as nearestCoordinate,V as nearestVertex,H as nearestVertices,v as offset,g as overlaps,O as planarArea,q as planarLength,m as relate,z as rotate,h as simplify,A as symmetricDifference,l as touches,R as union,p as within};
