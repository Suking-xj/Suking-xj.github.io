import{f1 as t,f2 as e,f3 as n,f4 as i,f5 as r,aS as s}from"./vendor.d5722712.js";class o{constructor(){this.code=null,this.description=null}}class a{constructor(t){this.error=new o,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function l(t){return new a(t)}class u{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function c(t){return new u(t)}const f=new Set;function d(t,e,n,s,o=!1,a){f.clear();for(const u in s){const e=t.get(u);if(!e)continue;const c=s[u],d=h(e,c);if(d!==c&&a&&a.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:e,originalValue:c,sanitizedValue:d}}),f.add(e.name),e&&(o||e.editable)){const t=i(e,d);if(t)return l(r(t,e,d));n[e.name]=d}}for(const i of e)if(!f.has(i.name))return l(`missing required field "${i.name}"`);return null}function h(i,r){let s=r;return"string"==typeof r&&t(i)?s=parseFloat(r):null!=r&&e(i)&&"string"!=typeof r&&(s=String(r)),n(s)}let m;function g(t,e){if(!t||!s(e))return t;if("rings"in t||"paths"in t){if(!m)throw new TypeError("geometry engine not loaded");return m.simplify(e,t)}return t}async function p(t,e){!s(t)||"esriGeometryPolygon"!==e&&"esriGeometryPolyline"!==e||await async function(){return m||(m=await import("./geometryEngineJSON.100cb9da.js"),m)}()}export{c,d,g as h,l as u,p as y};
