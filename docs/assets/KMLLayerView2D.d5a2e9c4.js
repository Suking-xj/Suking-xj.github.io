var e=Object.defineProperty,i=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,a=(i,t,s)=>t in i?e(i,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):i[t]=s,l=(e,l)=>{for(var o in l||(l={}))t.call(l,o)&&a(e,o,l[o]);if(i)for(var o of i(l))s.call(l,o)&&a(e,o,l[o]);return e};import{al as o,dR as r,cc as n,U as h,bN as p,bJ as m,ce as d,r as c,t as y,dO as b,cg as u,aV as w,dS as g,dT as _,ct as V,cE as f,p as v,y as j,q as S}from"./vendor.abf366c9.js";import{b as I,g as P,d as C}from"./kmlUtils.e869ba07.js";import{l as x,d as k}from"./LayerView2D.6b7d6a0c.js";import{e as M}from"./BaseGraphicContainer.a08e1b72.js";import{i as U}from"./GraphicContainer.dcc49504.js";import{_ as L}from"./Bitmap.861d0394.js";import{t as D}from"./BitmapContainer.0a1a8a45.js";import"./aaBoundingBox.ef55777a.js";import"./Container.9714e1c0.js";import"./mat4f32.a5cabe00.js";import"./_commonjsHelpers.f2a458db.js";import"./definitions.6737c10c.js";import"./schemaUtils.eb60e7e9.js";import"./MD5.1ef35834.js";import"./Utils.5228be88.js";import"./FramebufferObject.55526cd6.js";import"./MaterialKey.940ba235.js";import"./visualVariablesUtils.99d558bb.js";import"./Rect.b51904ac.js";import"./BidiEngine.9b392b22.js";import"./WGLMeshFactory.c4bfdd7b.js";import"./ComputedAttributeStorage.cb18fda2.js";import"./quickselect.e4940b29.js";import"./FeatureSetReader.e8820b66.js";import"./centroid.93c1b848.js";import"./visualVariablesUtils.d3e8106e.js";import"./tileUtils.346f220e.js";import"./TurboLine.110e44de.js";import"./GeometryUtils.9c8423f5.js";import"./quantizationUtils.bfb6cef5.js";import"./json.7989af9b.js";import"./VertexArrayObject.edd2ea65.js";import"./FeatureContainer.b45dc52e.js";import"./TileContainer.445deee8.js";import"./WGLContainer.8b961f3e.js";import"./vec4f32.6de15d07.js";import"./ShaderCompiler.e629f916.js";import"./earcut.0e5467f0.js";class T{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let A=class extends(x(k)){constructor(){super(...arguments),this._handles=new o,this._bitmapIndex=new Map,this._mapImageContainer=new D,this._kmlVisualData=new T,this.allVisiblePoints=new r,this.allVisiblePolylines=new r,this.allVisiblePolygons=new r,this.allVisibleMapImages=new n}hitTest(e,i){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return Promise.resolve(null);const t=[this._pointsView.hitTest(e,i),this._polylinesView.hitTest(e,i),this._polygonsView.hitTest(e,i)];return Promise.all(t).then((e=>e.filter((e=>(e&&(e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)}attach(){this._handles.add([this.allVisibleMapImages.on("change",(e=>{e.added.forEach((e=>this._addMapImage(e))),e.removed.forEach((e=>this._removeMapImage(e)))}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new M({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new U(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new M({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new U(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new M({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new U(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(e=>{for(const[i,t]of this._kmlVisualData.allSublayers)t.visibility=0;for(const i of e){const e=this._kmlVisualData.allSublayers.get(i.id);e&&(e.visibility=1)}this._refreshCollections()})),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating")}))}detach(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(e){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&h(e.href,{responseType:"image"}).then((({data:i})=>{let t=p.fromJSON(e.extent);m(t,this.view.spatialReference)&&(t=d(t,this.view.spatialReference));const s=new L(i,"standard");s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/i.naturalWidth,s.rotation=e.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(e,s)}))}async _getViewDependentUrl(e,i){const{viewFormat:t,viewBoundScale:s,httpQuery:a}=e;if(c(t)){if(y(i))throw new Error("Loading this network link requires a view state.");let o;if(await b(),c(s)&&1!==s){const e=new p(i.extent);e.expand(s),o=e}else o=i.extent;o=u(o,w.WGS84);const r=u(o,w.WebMercator),n=o.xmin,h=o.xmax,m=o.ymin,d=o.ymax,v=i.size[0]*i.pixelRatio,j=i.size[1]*i.pixelRatio,S=Math.max(r.width,r.height),I={"[bboxWest]":n.toString(),"[bboxEast]":h.toString(),"[bboxSouth]":m.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":o.center.x.toString(),"[lookatLat]":o.center.y.toString(),"[lookatRange]":S.toString(),"[lookatTilt]":"0","[lookatHeading]":i.rotation.toString(),"[lookatTerrainLon]":o.center.x.toString(),"[lookatTerrainLat]":o.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":o.center.x.toString(),"[cameraLat]":o.center.y.toString(),"[cameraAlt]":S.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":v.toString(),"[vertPixels]":j.toString(),"[terrainEnabled]":"0","[clientVersion]":g,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},P=e=>{for(const i in e)for(const t in I)e[i]=e[i].replace(t,I[t])},C=_(t);P(C);let x={};c(a)&&(x=_(a),P(x));const k=V(e.href);return k.query=l(l(l({},k.query),C),x),`${k.path}?${f(C)}`}return e.href}async _fetchService(){const e=new T;await this._loadVisualData(this.layer.url,e),this._kmlVisualData=e,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e)))}_isSublayerVisible(e){const i=this._kmlVisualData.allSublayers.get(e);return!!i.visibility&&(-1===i.parentFolderId||this._isSublayerVisible(i.parentFolderId))}_loadVisualData(e,i){return this._fetchParsedKML(e).then((async e=>{for(const t of e.sublayers){i.allSublayers.set(t.id,t);const e=t.points?await I(t.points):[],s=t.polylines?await I(t.polylines):[],a=t.polygons?await I(t.polygons):[],l=t.mapImages||[];if(i.allPoints.push(...e.map((e=>({item:e,sublayerId:t.id})))),i.allPolylines.push(...s.map((e=>({item:e,sublayerId:t.id})))),i.allPolygons.push(...a.map((e=>({item:e,sublayerId:t.id})))),i.allMapImages.push(...l.map((e=>({item:e,sublayerId:t.id})))),t.networkLink){const e=await this._getViewDependentUrl(t.networkLink,this.view.state);await this._loadVisualData(e,i)}}}))}_fetchParsedKML(e){return P(e,this.view.spatialReference,this.layer.refreshInterval).then((e=>C(e.data)))}_removeMapImage(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e))}};v([j()],A.prototype,"_pointsView",void 0),v([j()],A.prototype,"_polylinesView",void 0),v([j()],A.prototype,"_polygonsView",void 0),v([j()],A.prototype,"_fetchingPromise",void 0),v([j()],A.prototype,"updating",void 0),A=v([S("esri.views.2d.layers.KMLLayerView2D")],A);var q=A;export default q;
