var e=Object.defineProperty,t=Object.defineProperties,r=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,o=(t,r,n)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[r]=n,a=(e,t)=>{for(var r in t||(t={}))s.call(t,r)&&o(e,r,t[r]);if(n)for(var r of n(t))i.call(t,r)&&o(e,r,t[r]);return e},l=(e,n)=>t(e,r(n));import{dS as c,e2 as u,aj as N,bi as p,e3 as f,bG as y,cW as m,c9 as T,ae as g,af as I,ag as d,e4 as S,dA as _,dp as O,dD as R,dT as U}from"./vendor.74d5941c.js";import{a as h}from"./ProjectParameters.7956a902.js";function E(e){return{geometryType:p(e[0]),geometries:e.map((e=>e.toJSON()))}}function A(e,t,r){const n=f(t);return e.map((e=>{const t=n.fromJSON(e);return t.spatialReference=r,t}))}const J=new T({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"});const v=new T({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});let w=class extends _{constructor(e){super(e),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};g([I({type:String,json:{write:!0}})],w.prototype,"deviationUnit",void 0),g([I({json:{read:{reader:e=>e?e.map((e=>m(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],w.prototype,"geometries",void 0),g([I({type:Number,json:{write:!0}})],w.prototype,"maxDeviation",void 0),w=g([d("esri.tasks.support.GeneralizeParameters")],w),w.from=S(w);var j=w;async function D(e,t,r){const n=(t=j.from(t)).toJSON(),s=function(e){const{geometries:t,deviationUnit:r,maxDeviation:n}=e.toJSON(),s={maxDeviation:n};return t&&t.length&&(s.geometries=JSON.stringify({geometryType:p(t[0]),geometries:t}),s.sr=JSON.stringify(t[0].spatialReference)),v.write(r,s,"deviationUnit"),s}(t),i=c(e),o=a(l(a({},i.query),{f:"json"}),s),f=n.geometries[0].spatialReference,y=u(o,r);return N(i.path+"/generalize",y).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:f})))))}const L=new T({preserveShape:"preserve-shape"});let C=class extends _{constructor(e){super(e),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};g([I({type:String,json:{write:!0}})],C.prototype,"calculationType",void 0),g([I({type:Boolean,json:{write:!0}})],C.prototype,"geodesic",void 0),g([I({json:{write:!0}})],C.prototype,"lengthUnit",void 0),g([I({type:[O],json:{read:{reader:e=>e?e.map((e=>m(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],C.prototype,"polylines",void 0),C=g([d("esri.tasks.support.LengthsParameters")],C),C.from=S(C);var M=C;async function q(e,t,r){const n=function(e){const{polylines:t,lengthUnit:r,geodesic:n,calculationType:s}=e.toJSON(),i={};i.polylines=JSON.stringify(t);const o=e.polylines[0].spatialReference;return i.sr=o.wkid?o.wkid:JSON.stringify(o.toJSON()),r&&(i.lengthUnit=r),n&&(i.geodesic=n),s&&(i.calculationType=L.toJSON(s)),i}(t=M.from(t)),s=c(e),i=a(l(a({},s.query),{f:"json"}),n),o=u(i,r);return N(s.path+"/lengths",o).then((({data:e})=>e))}const G=new T({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),x=new T({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});let b=class extends _{constructor(e){super(e),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};g([I({type:Number,json:{write:!0}})],b.prototype,"bevelRatio",void 0),g([I({json:{read:{reader:e=>e?e.map((e=>m(e))):null},write:{writer:(e,t)=>{t.geometries=e.map((e=>e.toJSON()))}}}})],b.prototype,"geometries",void 0),g([I({type:Number,json:{write:!0}})],b.prototype,"offsetDistance",void 0),g([I({type:String,json:{write:!0}})],b.prototype,"offsetHow",void 0),g([I({type:String,json:{write:!0}})],b.prototype,"offsetUnit",void 0),b=g([d("esri.tasks.support.OffsetParameters")],b),b.from=S(b);var H=b;async function P(e,t,r){const n=function(e){const{geometries:t,bevelRatio:r,offsetDistance:n,offsetHow:s,offsetUnit:i}=e.toJSON(),o={bevelRatio:r,offsetDistance:n};return t&&t.length&&(o.geometries=JSON.stringify({geometryType:p(t[0]),geometries:t}),o.sr=JSON.stringify(t[0].spatialReference)),s&&(o.offsetHow=G.toJSON(s)),i&&(o.offsetUnit=x.toJSON(i)),o}(t=H.from(t)),s=c(e),i=a(l(a({},s.query),{f:"json"}),n),o=t.geometries[0].spatialReference,f=u(i,r);return N(s.path+"/offset",f).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:o})))))}const k=S(h);const Y=new T({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});let F=class extends _{constructor(e){super(e),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};g([I({json:{read:{reader:e=>e?e.map((e=>m(e))):null},write:{writer:(e,t)=>{t.geometries1=e.map((e=>e.toJSON()))}}}})],F.prototype,"geometries1",void 0),g([I({json:{read:{reader:e=>e?e.map((e=>m(e))):null},write:{writer:(e,t)=>{t.geometries2=e.map((e=>e.toJSON()))}}}})],F.prototype,"geometries2",void 0),g([I({type:String,json:{write:!0}})],F.prototype,"relation",void 0),g([I({type:String,json:{write:!0}})],F.prototype,"relationParameter",void 0),F=g([d("esri.tasks.support.RelationParameters")],F),F.from=S(F);var K=F;async function B(e,t,r){const n=function(e){const{geometries1:t,geometries2:r,relation:n,relationParameter:s}=e.toJSON(),i={};if(t&&t.length){i.geometries1=JSON.stringify({geometryType:p(t[0]),geometries:t});const e=t[0].spatialReference;i.sr=e.wkid?e.wkid:JSON.stringify(e)}return r&&r.length>0&&(i.geometries2=JSON.stringify({geometryType:p(r[0]),geometries:r})),n&&(i.relation=Y.toJSON(n)),s&&(i.relationParam=s),i}(t=K.from(t)),s=c(e),i=a(l(a({},s.query),{f:"json"}),n),o=u(i,r);return N(s.path+"/relation",o).then((({data:e})=>e.relations))}const Q=new T({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});let V=class extends _{constructor(e){super(e),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};g([I({type:String,json:{write:!0}})],V.prototype,"extendHow",void 0),g([I({type:[O],json:{read:{reader:e=>e?e.map((e=>m(e))):null},write:{writer:(e,t)=>{t.polylines=e.map((e=>e.toJSON()))}}}})],V.prototype,"polylines",void 0),g([I({json:{read:{reader:e=>e?m(e):null},write:{writer:(e,t)=>{t.trimExtendTo=e.toJSON()}}}})],V.prototype,"trimExtendTo",void 0),V=g([d("esri.tasks.support.TrimExtendParameters")],V),V.from=S(V);var z=V;async function W(e,t,r){const n=function(e){const{extendHow:t,polylines:r,trimExtendTo:n}=e.toJSON(),s={};return s.extendHow=Q.toJSON(t),r&&r.length&&(s.polylines=JSON.stringify(r),s.sr=JSON.stringify(r[0].spatialReference)),n&&(s.trimExtendTo=JSON.stringify(n)),s}(t=z.from(t)),s=c(e),i=a(l(a({},s.query),{f:"json"}),n),o=t.sr,p=u(i,r);return N(s.path+"/trimExtend",p).then((({data:e})=>(e.geometries||[]).map((({paths:e})=>new O({spatialReference:o,paths:e})))))}let X=class extends U{constructor(e){super(e),this.url=null}areasAndLengths(e,t){return async function(e,t,r){const n=c(e),s=a(l(a({},n.query),{f:"json"}),t.toJSON()),i=u(s,r);return N(n.path+"/areasAndLengths",i).then((e=>e.data))}(this.url,e,t)}autoComplete(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=c(e),o=l(a({},i.query),{f:"json",sr:JSON.stringify(s.toJSON()),polygons:JSON.stringify(E(t).geometries),polylines:JSON.stringify(E(r).geometries)}),p=u(o,n);return N(i.path+"/autoComplete",p).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new y({spatialReference:s,rings:e})))))}(this.url,e,t,r)}buffer(e,t){return async function(e,t,r){const n=c(e),s=a(l(a({},n.query),{f:"json"}),t.toJSON()),i=t.outSpatialReference||t.geometries[0].spatialReference,o=u(s,r);return N(n.path+"/buffer",o).then((e=>(e.data.geometries||[]).map((({rings:e})=>new y({spatialReference:i,rings:e})))))}(this.url,e,t)}convexHull(e,t){return async function(e,t,r){const n=t[0].spatialReference,s=c(e),i=l(a({},s.query),{f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify(E(t))}),o=u(i,r);return N(s.path+"/convexHull",o).then((({data:e})=>m(e.geometry).set({spatialReference:n})))}(this.url,e,t)}cut(e,t,r){return async function(e,t,r,n){const s=c(e),i=t[0].spatialReference,o=l(a({},n),{query:l(a({},s.query),{f:"json",sr:JSON.stringify(i),target:JSON.stringify({geometryType:p(t[0]),geometries:t}),cutter:JSON.stringify(r)})}),u=await N(s.path+"/cut",o),{cutIndexes:f,geometries:y=[]}=u.data;return{cutIndexes:f,geometries:y.map((e=>{const t=m(e);return t.spatialReference=i,t}))}}(this.url,e,t,r)}densify(e,t){return async function(e,t,r){const n=t.geometries[0].spatialReference,s=c(e),i=a(l(a({},s.query),{f:"json"}),t.toJSON()),o=u(i,r);return N(s.path+"/densify",o).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:n})))))}(this.url,e,t)}difference(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=c(e);let o={query:l(a({},i.query),{f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify(E(t)),geometry:JSON.stringify({geometryType:p(r),geometry:r.toJSON()})})};return n&&(o=a(a({},n),o)),N(i.path+"/difference",o).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:s})))))}(this.url,e,t,r)}distance(e,t){return async function(e,t,r){const n=c(e),s=a(l(a({},n.query),{f:"json"}),t.toJSON()),i=u(s,r);return N(n.path+"/distance",i).then((({data:e})=>e&&e.distance))}(this.url,e,t)}fromGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.strings=JSON.stringify(t.strings);const s=t.conversionType||"mgrs";n.conversionType=J.toJSON(s),n.conversionMode=t.conversionMode;const i=c(e),o=a(l(a({},i.query),{f:"json"}),n),p=u(o,r);return N(i.path+"/fromGeoCoordinateString",p).then((({data:e})=>e.coordinates))}(this.url,e,t)}generalize(e,t){return D(this.url,e,t)}intersect(e,t,r){return async function(e,t,r,n){const s=t[0].spatialReference,i=c(e),o=l(a({},i.query),{f:"json",sr:JSON.stringify(s.toJSON()),geometries:JSON.stringify(E(t)),geometry:JSON.stringify({geometryType:p(r),geometry:r.toJSON()})}),f=u(o,n);return N(i.path+"/intersect",f).then((({data:e})=>(e.geometries||[]).map((e=>m(e).set({spatialReference:s})))))}(this.url,e,t,r)}labelPoints(e,t){return function(e,t,r){const n=t.map((e=>e.toJSON())),s=t[0].spatialReference,i=c(e),o=l(a({},i.query),{f:"json",sr:s.wkid?s.wkid:JSON.stringify(s.toJSON()),polygons:JSON.stringify(n)}),p=u(o,r);return N(i.path+"/labelPoints",p).then((({data:e})=>(e.labelPoints||[]).map((e=>m(e).set({spatialReference:s})))))}(this.url,e,t)}lengths(e,t){return q(this.url,e,t)}offset(e,t){return P(this.url,e,t)}project(e,t){return async function(e,t,r){t=k(t);const n=c(e),s=a(l(a({},n.query),{f:"json"}),t.toJSON()),i=t.outSpatialReference,o=p(t.geometries[0]),f=u(s,r);return N(n.path+"/project",f).then((({data:{geometries:e}})=>A(e,o,i)))}(this.url,e,t)}relation(e,t){return B(this.url,e,t)}reshape(e,t,r){return async function(e,t,r,n){const s=t.spatialReference,i=c(e),o=l(a({},i.query),{f:"json",sr:JSON.stringify(s.toJSON()),target:JSON.stringify({geometryType:p(t),geometry:t.toJSON()}),reshaper:JSON.stringify(r.toJSON())}),f=u(o,n);return N(i.path+"/reshape",f).then((({data:e})=>m(e.geometry).set({spatialReference:s})))}(this.url,e,t,r)}simplify(e,t){return async function(e,t,r){const n="string"==typeof e?R(e):e,s=t[0].spatialReference,i=p(t[0]),o=l(a({},r),{query:l(a({},n.query),{f:"json",sr:s.wkid?s.wkid:JSON.stringify(s),geometries:JSON.stringify(E(t))})}),{data:c}=await N(n.path+"/simplify",o);return A(c.geometries,i,s)}(this.url,e,t)}toGeoCoordinateString(e,t){return async function(e,t,r){const n={};null!=t.sr&&"object"==typeof t.sr?n.sr=t.sr.wkid||JSON.stringify(t.sr):n.sr=t.sr,n.coordinates=JSON.stringify(t.coordinates);const s=t.conversionType||"mgrs";n.conversionType=J.toJSON(s),n.conversionMode=t.conversionMode,n.numOfDigits=t.numOfDigits,n.rounding=t.rounding,n.addSpaces=t.addSpaces;const i=c(e),o=a(l(a({},i.query),{f:"json"}),n),p=u(o,r);return N(i.path+"/toGeoCoordinateString",p).then((({data:e})=>e.strings))}(this.url,e,t)}trimExtend(e,t){return W(this.url,e,t)}union(e,t){return async function(e,t,r){const n=t[0].spatialReference,s=c(e),i=l(a({},s.query),{f:"json",sr:JSON.stringify(n.toJSON()),geometries:JSON.stringify(E(t))}),o=u(i,r);return N(s.path+"/union",o).then((({data:e})=>m(e.geometry).set({spatialReference:n})))}(this.url,e,t)}};X.UNIT_METER=9001,X.UNIT_GERMAN_METER=9031,X.UNIT_FOOT=9002,X.UNIT_SURVEY_FOOT=9003,X.UNIT_CLARKE_FOOT=9005,X.UNIT_FATHOM=9014,X.UNIT_NAUTICAL_MILE=9030,X.UNIT_SURVEY_CHAIN=9033,X.UNIT_SURVEY_LINK=9034,X.UNIT_SURVEY_MILE=9035,X.UNIT_KILOMETER=9036,X.UNIT_CLARKE_YARD=9037,X.UNIT_CLARKE_CHAIN=9038,X.UNIT_CLARKE_LINK=9039,X.UNIT_SEARS_YARD=9040,X.UNIT_SEARS_FOOT=9041,X.UNIT_SEARS_CHAIN=9042,X.UNIT_SEARS_LINK=9043,X.UNIT_BENOIT_1895A_YARD=9050,X.UNIT_BENOIT_1895A_FOOT=9051,X.UNIT_BENOIT_1895A_CHAIN=9052,X.UNIT_BENOIT_1895A_LINK=9053,X.UNIT_BENOIT_1895B_YARD=9060,X.UNIT_BENOIT_1895B_FOOT=9061,X.UNIT_BENOIT_1895B_CHAIN=9062,X.UNIT_BENOIT_1895B_LINK=9063,X.UNIT_INDIAN_FOOT=9080,X.UNIT_INDIAN_1937_FOOT=9081,X.UNIT_INDIAN_1962_FOOT=9082,X.UNIT_INDIAN_1975_FOOT=9083,X.UNIT_INDIAN_YARD=9084,X.UNIT_INDIAN_1937_YARD=9085,X.UNIT_INDIAN_1962_YARD=9086,X.UNIT_INDIAN_1975_YARD=9087,X.UNIT_FOOT_1865=9070,X.UNIT_RADIAN=9101,X.UNIT_DEGREE=9102,X.UNIT_ARCMINUTE=9103,X.UNIT_ARCSECOND=9104,X.UNIT_GRAD=9105,X.UNIT_GON=9106,X.UNIT_MICRORADIAN=9109,X.UNIT_ARCMINUTE_CENTESIMAL=9112,X.UNIT_ARCSECOND_CENTESIMAL=9113,X.UNIT_MIL6400=9114,X.UNIT_BRITISH_1936_FOOT=9095,X.UNIT_GOLDCOAST_FOOT=9094,X.UNIT_INTERNATIONAL_CHAIN=109003,X.UNIT_INTERNATIONAL_LINK=109004,X.UNIT_INTERNATIONAL_YARD=109001,X.UNIT_STATUTE_MILE=9093,X.UNIT_SURVEY_YARD=109002,X.UNIT_50KILOMETER_LENGTH=109030,X.UNIT_150KILOMETER_LENGTH=109031,X.UNIT_DECIMETER=109005,X.UNIT_CENTIMETER=109006,X.UNIT_MILLIMETER=109007,X.UNIT_INTERNATIONAL_INCH=109008,X.UNIT_US_SURVEY_INCH=109009,X.UNIT_INTERNATIONAL_ROD=109010,X.UNIT_US_SURVEY_ROD=109011,X.UNIT_US_NAUTICAL_MILE=109012,X.UNIT_UK_NAUTICAL_MILE=109013,X.UNIT_SQUARE_INCHES="esriSquareInches",X.UNIT_SQUARE_FEET="esriSquareFeet",X.UNIT_SQUARE_YARDS="esriSquareYards",X.UNIT_ACRES="esriAcres",X.UNIT_SQUARE_MILES="esriSquareMiles",X.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",X.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",X.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",X.UNIT_SQUARE_METERS="esriSquareMeters",X.UNIT_ARES="esriAres",X.UNIT_HECTARES="esriHectares",X.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",g([I()],X.prototype,"url",void 0),X=g([d("esri.tasks.GeometryService")],X);var Z=X;export default Z;
