var e=Object.defineProperty,t=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,r=(t,s,i)=>s in t?e(t,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[s]=i,n=(e,n)=>{for(var a in n||(n={}))s.call(n,a)&&r(e,a,n[a]);if(t)for(var a of t(n))i.call(n,a)&&r(e,a,n[a]);return e};import{b6 as a,b7 as o,b8 as l,b9 as d,ba as h,bb as c,bc as u,bd as f,be as p,bf as m,bg as y,bh as g,a5 as x,bi as _,bj as v,a0 as b,bk as D,bl as w,bm as B,bn as C,bo as T,bp as F,bq as L,br as I,ai as R,bs as S,bt as M,bu as A,bv as G,bw as z,bx as O,by as U,a9 as j,bz as P,bA as V,ae as k,af as K,ag as E,bB as q,ab as H,ac as N,bC as Z,aO as X,bD as Y,bE as J,bF as Q,aq as W,bG as $,bH as ee,bI as te,an as se,bJ as ie,bK as re,bL as ne}from"./vendor.74d5941c.js";import{P as ae}from"./definitions.6737c10c.js";import{H as oe,C as le,A as de,K as he,G as ce,D as ue,J as fe,W as pe,P as me,a as ye,T as ge,S as xe,n as _e,z as ve}from"./schemaUtils.ab77d03d.js";import{a as be,r as De,s as we,k as Be,i as Ce,b as Te,E as Fe}from"./WGLMeshFactory.8977e3d9.js";import{p as Le,y as Ie}from"./projectionSupport.62084d5a.js";import{q as Re,R as Se,C as Me,Z as Ae,_ as Ge,a as ze,I as Oe,E as Ue,T as je,t as Pe}from"./Utils.3f1577e5.js";import"./FramebufferObject.18518335.js";import{a as Ve,s as ke}from"./VertexArrayObject.67803418.js";import{r as Ke,o as Ee}from"./FeatureContainer.3e3899c9.js";import{c as qe,i as He,u as Ne,l as Ze,O as Xe}from"./ComputedAttributeStorage.2a55b702.js";import{d as Ye}from"./FeatureSetReader.a91e3e2d.js";function Je(e){if(!e)return null;if("mesh"===e.type)return e.toJSON();let t=null;const s=e.spatialReference,i=o(s);if(!i)return e.toJSON();const r=s.isWebMercator?102100:4326,n=l[r].maxX,a=l[r].minX,x=l[r].plus180Line,_=l[r].minus180Line;let v;const b=e.toJSON();if(d(b))v=Qe(b,n,a);else if(h(b))b.points=b.points.map((e=>Qe(e,n,a))),v=b;else if(c(b))v=function(e,t){if(!t)return e;const s=function(e,t){const s=[],{ymin:i,ymax:r}=e,n=e.xmax-e.xmin,a=e.xmin,o=e.xmax;let l;const[d,h]=t.valid;l=We(e.xmin,t);const c=l.x,u=l.frameId;l=We(e.xmax,t);const f=l.x,p=l.frameId,m=c===f&&n>0;if(n>2*h){const e={xmin:a<o?c:f,ymin:i,xmax:h,ymax:r},t={xmin:d,ymin:i,xmax:a<o?f:c,ymax:r},n={xmin:0,ymin:i,xmax:h,ymax:r},l={xmin:d,ymin:i,xmax:0,ymax:r},m=[],y=[];$e(e,n)&&m.push(u),$e(e,l)&&y.push(u),$e(t,n)&&m.push(p),$e(t,l)&&y.push(p);for(let s=u+1;s<p;s++)m.push(s),y.push(s);s.push({extent:e,frameIds:[u]},{extent:t,frameIds:[p]},{extent:n,frameIds:m},{extent:l,frameIds:y})}else c>f||m?s.push({extent:{xmin:c,ymin:i,xmax:h,ymax:r},frameIds:[u]},{extent:{xmin:d,ymin:i,xmax:f,ymax:r},frameIds:[p]}):s.push({extent:{xmin:c,ymin:i,xmax:f,ymax:r},frameIds:[u]});return s}(e,t).map((e=>e.extent));return s.length<2?s[0]||e:s.length>2?(e.xmin=t.valid[0],e.xmax=t.valid[1],e):{rings:s.map((e=>[[e.xmin,e.ymin],[e.xmin,e.ymax],[e.xmax,e.ymax],[e.xmax,e.ymin],[e.xmin,e.ymin]]))}}(b,i);else if(u(b)||f(b)){const e=st;p(e,b);const s={xmin:e[0],ymin:e[1],xmax:e[2],ymax:e[3]},i=g(s.xmin,a)*(2*n),r=0===i?b:function(e,t){const s=y(e);for(const i of s)for(const e of i)e[0]+=t;return e}(b,i);s.xmin+=i,s.xmax+=i,m(s,x)&&s.xmax!==n||m(s,_)&&s.xmin!==a?t=r:v=r}else v=e.toJSON();return null!==t?(new tt).cut(t,n):v}function Qe(e,t,s){if(Array.isArray(e)){const i=e[0];if(i>t){const s=g(i,t);e[0]=i+s*(-2*t)}else if(i<s){const t=g(i,s);e[0]=i+t*(-2*s)}}else{const i=e.x;if(i>t){const s=g(i,t);e.x+=s*(-2*t)}else if(i<s){const t=g(i,s);e.x+=t*(-2*s)}}return e}function We(e,t){const[s,i]=t.valid,r=2*i;let n,a=0;return e>i?(n=Math.ceil(Math.abs(e-i)/r),e-=n*r,a=n):e<s&&(n=Math.ceil(Math.abs(e-s)/r),e+=n*r,a=-n),{x:e,frameId:a}}function $e(e,t){const{xmin:s,ymin:i,xmax:r,ymax:n}=t;return et(e,s,i)&&et(e,s,n)&&et(e,r,n)&&et(e,r,i)}function et(e,t,s){return t>=e.xmin&&t<=e.xmax&&s>=e.ymin&&s<=e.ymax}class tt{cut(e,t){let s;if(e.rings)this.closed=!0,s=e.rings,this.minPts=4;else{if(!e.paths)return null;this.closed=!1,s=e.paths,this.minPts=2}const i=s.length,r=-2*t;for(let n=0;n<i;n++){const e=s[n];if(e&&e.length>=this.minPts){const t=[];for(const s of e)t.push([s[0]+r,s[1]]);s.push(t)}}return this.closed?e.rings=s:e.paths=s,e}}const st=a();function it(e,t,s){if(!e.allDirty)if(null!=e.from&&null!=e.count){const i=Math.min(e.from,t),r=Math.max(e.from+e.count,t+s)-i;e.from=i,e.count=r}else e.from=t,e.count=s}class rt{constructor(){this._dirties=Re((()=>({indices:{from:null,count:null,allDirty:!1}})),(()=>({vertices:{from:null,count:null,allDirty:!1}})))}hasDirty(){for(const e of this._dirties)if(null!==e.data.indices.count||e.data.indices.allDirty)return!0;return!1}markAllClean(){for(const e of this._dirties){e.data.indices.from=null,e.data.indices.count=null,e.data.indices.allDirty=!1;for(const t in e.buffers)e.buffers[t].data.vertices.from=null,e.buffers[t].data.vertices.count=null,e.buffers[t].data.vertices.allDirty=!1}}markAllDirty(){for(const e of this._dirties){e.data.indices.allDirty=!0;for(const t in e.buffers)e.buffers[t].data.vertices.allDirty=!0}}forEach(e){for(let t=0;t<this._dirties.length;++t){const s=this._dirties[t],i={};for(const e in s.buffers){const t=s.buffers[e].data.vertices;(t.allDirty||null!=t.from&&null!=t.count&&t.count>0)&&(i[e]=t)}const r=s.data.indices;let n;n=r.allDirty||null!=r.from&&null!=r.count&&r.count>0?{indices:r,vertices:i}:{indices:null,vertices:i},(n.indices||Object.keys(n).length>0)&&e(n,t)}}markDirtyIndices(e,t,s){it(this._dirties[e].data.indices,t,s)}markDirtyVertices(e,t,s,i){it(this._dirties[e].buffers[t].data.vertices,s,i)}}class nt{constructor(e){this._largestRange=null,this._parent=e,this._updateLargestRange()}get largestRange(){return this._largestRange}rangeCreated(e){(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}rangeResized(e,t){e===this._largestRange?e.count<t&&this._updateLargestRange():(!this._largestRange||e.count>this._largestRange.count)&&(this._largestRange=e)}findBestRange(e){let t=this._parent._freeHead,s=null;for(;null!==t;)t.count>=e&&(!s||t.count-e<s.count-e)&&(s=t),t=t.next;return s}findAdjacentRanges(e,t){let s=!0,i=!1,r=null,n=this._parent._freeHead;for(;s&&!i;){const a=null!==r?r.from+r.count:0,o=null!==n?n.from:this._parent._size;e>=a&&e+t<=o?(s=!1,i=!0):null!==n?(r=n,n=n.next):s=!1}return[r,n]}_updateLargestRange(){let e=null,t=this._parent._freeHead;for(;null!==t;)(!e||t.count>e.count)&&(e=t),t=t.next;this._largestRange=e}}class at{constructor(e,t){this._allocated=0,this._size=e,this._freeHead=e>0?{from:0,count:e,prev:null,next:null}:null,this._bookKeeper=t||new nt(this),this._freeHead&&this._bookKeeper.rangeCreated(this._freeHead)}allocate(e){const t=this._bookKeeper.findBestRange(e);if(null===t)return-1;const s=t.from,i=t.count;if(t.from+=e,t.count-=e,this._bookKeeper.rangeResized(t,s,i),this._allocated+=e,0===t.count){const e=null!==t.prev?this._freeHead:t.next;at._removeRange(t),this._freeHead=e}return s}free(e,t){const[s,i]=this._bookKeeper.findAdjacentRanges(e,t),r={from:e,count:t,prev:s,next:i};if(null!==s&&(s.next=r),null!==i&&(i.prev=r),this._bookKeeper.rangeCreated(r),this._allocated-=t,null!==i&&r.from+r.count===i.from){const e=r.from,t=r.count;at._fuse(r,i),at._removeRange(i),this._bookKeeper.rangeResized(r,e,t),this._bookKeeper.rangeResized(i,void 0,0)}if(null!==s&&s.from+s.count===r.from){const e=s.from,t=s.count;at._fuse(s,r),at._removeRange(r),this._bookKeeper.rangeResized(s,e,t),this._bookKeeper.rangeResized(r,void 0,0)}this._freeHead=null!==r.prev?this._freeHead:r}get fragmentation(){const e=this._size-this._allocated;return 0===e?0:1-this._bookKeeper.largestRange.count/e}static _removeRange(e){null!==e.prev?null!==e.next?(e.prev.next=e.next,e.next.prev=e.prev):e.prev.next=null:null!==e.next&&(e.next.prev=null)}static _fuse(e,t){e.count+=t.count,e.next=t.next,t.from+=t.count,t.count=0,null!==t.next&&(t.next.prev=e)}}const ot=["FILL","LINE","MARKER","TEXT","LABEL"];class lt{constructor(e,t,s,i){this._strides=e,this._displayList=t,this._freeListsAndStorage={},this._dirtyMap=null,this._dirtyMap=s;for(const r in e){this._freeListsAndStorage[r]={vtxFreeList:i?new at(i):null,idxFreeList:i?new at(i):null,vertexBuffers:{},indexBuffer:i?new Uint32Array(i):null};for(const t in e[r])this._freeListsAndStorage[r].vertexBuffers[t]={data:i?Se(i,e[r][t]):null,stride:e[r][t]}}}static fromTileData(e,t){const s=function(e){const t=e.getStrides(),s={};for(let i=0;i<t.length;i++)s[ot[i]]=t[i];return s}(e),i=[0,0,0,0,0],r=[0,0,0,0,0],n=e.tileDisplayData.displayObjects;for(const o of n)for(const e of o.displayRecords)i[e.geometryType]=Math.max(i[e.geometryType],e.vertexFrom+e.vertexCount),r[e.geometryType]=Math.max(r[e.geometryType],e.indexFrom+e.indexCount);const a=new lt(s,e.tileDisplayData.displayList,t,null);for(let o=0;o<e.tileBufferData.geometries.length;++o){const t=i[o],s=r[o],n=e.tileBufferData.geometries[o],l=ot[o],d=a._storageFor(l),h=e.tileBufferData.geometries[o].indexBuffer;let c;d.indexBuffer=h,d.idxFreeList=new at(h.length),d.idxFreeList.allocate(s);for(const i in n.vertexBuffer){const t=e.tileBufferData.geometries[o].vertexBuffer[i];d.vertexBuffers[i].data=t.data,d.vertexBuffers[i].stride=t.stride;const s=Me(t.stride),r=t.data.length*s/t.stride;c||(c=r)}d.vtxFreeList=new at(c),d.vtxFreeList.allocate(t)}return a}delete(e){const t=ot[e.geometryType];this._freeVertices(t,e.vertexFrom,e.vertexCount),this._freeIndices(t,e.indexFrom,e.indexCount),this._displayList.removeFromList(e),e.vertexFrom=void 0,e.indexFrom=void 0}setMeshData(e,t,s,i,r){const n=ot[e.geometryType];let a,o;e.meshData=null,void 0===e.vertexFrom?(o=t.vertexCount,a=this._allocateVertices(n,o)):t.vertexCount>e.vertexCount?(this._freeVertices(n,e.vertexFrom,e.vertexCount),o=t.vertexCount,a=this._allocateVertices(n,o)):t.vertexCount===e.vertexCount?(a=e.vertexFrom,o=e.vertexCount):(this._freeVertices(n,e.vertexFrom+t.vertexCount,e.vertexCount-t.vertexCount),a=e.vertexFrom,o=t.vertexCount);let l,d,h,c=!0;if(void 0===e.indexFrom?(l=r,h=t.indexCount,d=this._allocateIndices(n,h)):t.indexCount>e.indexCount?(l=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom,e.indexCount),h=t.indexCount,d=this._allocateIndices(n,h)):t.indexCount===e.indexCount?(c=!1,d=e.indexFrom,h=e.indexCount):(l=this._displayList.removeFromList(e),this._freeIndices(n,e.indexFrom+t.indexCount,e.indexCount-t.indexCount),d=e.indexFrom,h=t.indexCount),-1!==a&&-1!==d){const r=this._storageFor(n);if(Ae(a,d,r.vertexBuffers,r.indexBuffer,t,s,i),e.vertexFrom=a,e.indexFrom=d,e.vertexCount=t.vertexCount,e.indexCount=t.indexCount,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in s)this._dirtyMap.markDirtyVertices(e.geometryType,t,e.vertexFrom,e.vertexCount)}return c&&this._displayList.addToList(e,l),!0}return-1!==a&&this._freeVertices(n,a,o),-1!==d&&this._freeIndices(n,d,h),e.setMeshDataFromBuffers(t,s,i),e.vertexFrom=void 0,e.vertexCount=0,e.indexFrom=void 0,e.indexCount=0,!1}tryAddMeshData(e,t){const s=t.vertexBuffer,i=t.indexBuffer,r=ot[e.geometryType],n=this._allocateVertices(r,e.vertexCount);if(-1===n)return this._freeVertices(r,n,e.vertexCount),!1;const a=this._allocateIndices(r,e.indexCount);if(-1===a)return this._freeVertices(r,n,e.vertexCount),this._freeIndices(r,a,e.indexCount),!1;const o=this._storageFor(r);if(Ae(n,a,o.vertexBuffers,o.indexBuffer,e,s,i),e.vertexFrom=n,e.indexFrom=a,this._dirtyMap){this._dirtyMap.markDirtyIndices(e.geometryType,e.indexFrom,e.indexCount);for(const t in s)this._dirtyMap.markDirtyVertices(e.geometryType,t,n,e.vertexCount)}return this._displayList.addToList(e),!0}_allocateVertices(e,t){const s=this._storageFor(e),i=s.vtxFreeList.allocate(t);return-1===i||s.vtxFreeList.fragmentation>.5?-1:i}_freeVertices(e,t,s){this._storageFor(e).vtxFreeList.free(t,s)}_freeIndices(e,t,s){this._storageFor(e).idxFreeList.free(t,s)}_allocateIndices(e,t){const s=this._storageFor(e),i=s.idxFreeList.allocate(t);return-1===i||s.idxFreeList.fragmentation>.5?-1:i}_storageFor(e){return this._freeListsAndStorage[e]}_stridesFor(e,t){return this._strides[e][t]}}class dt{constructor(e){this.geometryMap=Re((()=>({indexBuffer:ke.createIndex(e,35044),vao:null})),((t,s)=>({vertexBuffer:ke.createVertex(e,Ge[s])})))}dispose(){for(let e=0;e<5;e++){const t=this.geometryMap[e];if(t){t.data.vao&&t.data.vao.dispose(!1),t.data.indexBuffer&&t.data.indexBuffer.dispose();for(const e in t.buffers)t.buffers[e]&&t.buffers[e].data.vertexBuffer.dispose()}}}get(e){const t=this.geometryMap[e];return{draw(e,s,i,r,n){if(!t.data.vao){const r={};for(const e in t.buffers)r[e]=t.buffers[e].data.vertexBuffer;t.data.vao=new Ve(e,i,s,r,t.data.indexBuffer)}const a=t.data.vao;e.bindVAO(a),e.drawElements(4,n,5125,Uint32Array.BYTES_PER_ELEMENT*r),e.bindVAO(null)}}}has(e){return null!=this.geometryMap[e]}upload(e,t){t.forEach(((t,s)=>{this._upload(t,s,e)}))}_upload(e,t,s){if(e.indices&&(e.indices.allDirty?this._uploadIndices(s,t):null!=e.indices.from&&null!=e.indices.count&&this._uploadIndices(s,t,e.indices.from,e.indices.count)),e.vertices){const i=e.vertices;for(const e in i){const r=i[e];r.allDirty?this._uploadVertices(s,t,e):null!=r.from&&null!=r.count&&this._uploadVertices(s,t,e,r.from,r.count)}}}_uploadVertices(e,t,s,i,r){const n=this.geometryMap[t];if(!n)return;const a=e.geometries[t].vertexBuffer[s];if(!a)return;const o=a.stride,l=a.data.buffer;n.buffers[s]&&l.byteLength>0&&(null!=i&&null!=r?n.buffers[s].data.vertexBuffer.setSubData(l,i*o,i*o,(i+r)*o):n.buffers[s].data.vertexBuffer.setData(l))}_uploadIndices(e,t,s,i){const r=this.geometryMap[t];if(!r)return;const n=e.geometries[t].indexBuffer.buffer;r.data.indexBuffer&&n.byteLength>0&&(null!=s&&null!=i?r.data.indexBuffer.setSubData(n,4*s,4*s,4*(s+i)):r.data.indexBuffer.setData(n))}}class ht extends Ke{constructor(){super(...arguments),this._data=null,this._displayList=null,this._lastCommitTime=0,this._hasData=!1,this._invalidated=!1,this._wglBuffers=null,this._dirtyMap=new rt}destroy(){super.destroy(),this.clear()}get hasData(){return!!this._hasData}get displayObjects(){var e;return null!=(e=this._displayObjects)?e:[]}getGeometry(e){return this._wglBuffers&&this._wglBuffers.has(e)?this._wglBuffers.get(e):null}getDisplayList(){return this._displayList}patch(e){if(!0===e.clear)return this.clear(),void(this._hasData=!1);const t=e.addOrUpdate,s=e.remove;!this._data&&t&&t.tileDisplayData.displayObjects.length?(t.tileDisplayData.computeDisplayList(),this._dirtyMap=new rt,this._dispRecStore=lt.fromTileData(t,this._dirtyMap),this._data=t,this._dirtyMap.markAllDirty(),this._hasData=!0,e.end&&this.ready()):this._data&&(t&&t.tileDisplayData.displayObjects.length||s.length)?this._doPatchData(e):e.end&&this.ready(),e.end&&!this._data&&this.clear(),this.requestRender(),this.emit("change")}commit(e){e.time&&e.time===this._lastCommitTime||(this._lastCommitTime=e.time,this.visible&&this._data&&(this._wglBuffers||(this._wglBuffers=new dt(e.context)),(this._dirtyMap.hasDirty()||this._invalidated)&&(this._invalidated=!1,this._wglBuffers.upload(this._data.tileBufferData,this._dirtyMap),this._displayList=this._data.tileDisplayData.displayList.clone(),this._displayObjects=this._data.tileDisplayData.displayObjects.slice(),this._dirtyMap.markAllClean())))}clear(){this._data=null,this._displayList=null,this._dispRecStore=null,this._wglBuffers&&(this._wglBuffers.dispose(),this._wglBuffers=null)}_doPatchData(e){this._invalidated=!0,this._patchData(e)||(this._dirtyMap.markAllDirty(),this._data.reshuffle(),this._dispRecStore=lt.fromTileData(this._data,this._dirtyMap)),this.requestRender()}_patchData(e){let t=!0;const s=e.addOrUpdate&&e.addOrUpdate.tileDisplayData&&e.addOrUpdate.tileDisplayData.displayObjects||[],i=(e.remove||[]).slice();for(const r of s)null!=r.insertAfter&&i.push(r.id);for(const r of i){const e=this._data.tileDisplayData.displayObjectRegistry.get(r);if(e){this._data.tileDisplayData.displayList.removeFromList(e.displayRecords);for(const s of e.displayRecords)this._dispRecStore.delete(s);this._data.tileDisplayData.displayObjectRegistry.delete(r);const t=this._data.tileDisplayData.displayObjects.indexOf(e);this._data.tileDisplayData.displayObjects.splice(t,1)}}for(const r of s){let s,i=this._data.tileDisplayData.displayObjectRegistry.get(r.id);if(i){const e=i.displayRecords;i.set(r),i.displayRecords=e;const t=i.displayRecords.length;for(let s=0;s<t;++s){const e=i.displayRecords[s],t=r.displayRecords[s];(s>=r.displayRecords.length||e.geometryType!==t.geometryType||e.symbolLevel!==t.symbolLevel||e.zOrder!==t.zOrder||e.materialKey!==t.materialKey)&&(this._dispRecStore.delete(i.displayRecords[s]),s<r.displayRecords.length&&(i.displayRecords[s]=void 0))}i.displayRecords.length=r.displayRecords.length}else{let e;i=r.copy(),i.displayRecords=[],this._data.tileDisplayData.displayObjectRegistry.set(r.id,i);const t=this._data.tileDisplayData.displayObjects;if(null!=i.insertAfter)if(s={},i.insertAfter>=0){const s=this._data.tileDisplayData.displayObjectRegistry.get(i.insertAfter);s?(e=t.indexOf(s)+1,e<t.length?t.splice(e,0,i):(t.push(i),e=t.length)):(t.push(i),e=t.length)}else t.unshift(i),e=0;else t.push(i),e=t.length;if(s){const i=r.displayRecords.length>0?1:0;let n=0;for(let r=e-1;r>=0&&n<i;--r)for(let e=t[r].displayRecords.length-1;e>=0&&n<i;--e){const i=t[r].displayRecords[e],a=this._data.tileDisplayData.displayList.getDPInfoType();s[a]||(s[a]=i,++n)}}}const n=r.displayRecords.length;for(let a=0;a<n;++a){const n=r.displayRecords[a];let o=i.displayRecords[a];o?(o.meshData=n.meshData,o.materialKey=n.materialKey):(o=n.copy(),o.vertexFrom=void 0,o.indexFrom=void 0,i.displayRecords[a]=o);const l=n.geometryType,d=this._data.tileDisplayData.displayList.getDPInfoType(),h=e.addOrUpdate.tileBufferData.geometries[l],c=h.vertexBuffer,u=h.indexBuffer;let f;s&&(f=s[d]?this._data.tileDisplayData.displayList.splitAfter(s[d]):-1),t=this._dispRecStore.setMeshData(o,n,c,u,f)&&t,s&&null!=o.indexFrom&&null!=o.indexFrom&&(s[d]=o)}}return t}}class ct{constructor(){this._byGeometryType=null}get satisfied(){return!this._byGeometryType}reset(){this._byGeometryType=null}verticesFor(e){return this._byGeometryType?this._byGeometryType[e].vertices:0}indicesFor(e){return this._byGeometryType?this._byGeometryType[e].indices:0}needMore(e,t,s){if(!t&&!s)return;this._byGeometryType||(this._byGeometryType=[{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0},{vertices:0,indices:0}]);const i=this._byGeometryType[e];i.vertices+=t,i.indices+=s}}class ut{constructor(){this.geometries=[{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}},{indexBuffer:void 0,vertexBuffer:{}}]}clone(){const e=new ut;for(let t=0;t<this.geometries.length;t++){const s=this.geometries[t],i=e.geometries[t];i.indexBuffer=s.indexBuffer.slice(),i.vertexBuffer={};for(const e in s.vertexBuffer){const{data:t,stride:r}=s.vertexBuffer[e];i.vertexBuffer[e]={data:t.slice(),stride:r}}}return e}static deserialize(e){const t=new ut;for(let s=0;s<5;++s){t.geometries[s].indexBuffer=new Uint32Array(e.geometries[s].indexBuffer),t.geometries[s].vertexBuffer={};for(const i in e.geometries[s].vertexBuffer)t.geometries[s].vertexBuffer[i]={data:ze(e.geometries[s].vertexBuffer[i].data,e.geometries[s].vertexBuffer[i].stride),stride:e.geometries[s].vertexBuffer[i].stride}}return t}serialize(){const e={geometries:[{indexBuffer:this.geometries[0].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[1].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[2].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[3].indexBuffer.buffer,vertexBuffer:{}},{indexBuffer:this.geometries[4].indexBuffer.buffer,vertexBuffer:{}}]};for(let t=0;t<5;++t)for(const s in this.geometries[t].vertexBuffer)e.geometries[t].vertexBuffer[s]={data:this.geometries[t].vertexBuffer[s].data.buffer,stride:this.geometries[t].vertexBuffer[s].stride};return e}getBuffers(){const e=[];for(let t=0;t<5;++t){e.push(this.geometries[t].indexBuffer.buffer);for(const s in this.geometries[t].vertexBuffer)e.push(this.geometries[t].vertexBuffer[s].data.buffer)}return e}}class ft{constructor(){this.vertexData=new Map,this.vertexCount=0,this.indexData=[]}clear(){this.vertexData.clear(),this.vertexCount=0,this.indexData=[]}update(e,t,s){for(const i in e)this.vertexData.set(i,e[i]);for(const i in this.vertexData)null===e[i]&&this.vertexData.delete(i);this.vertexCount=t,this.indexData=s}}class pt{constructor(e,t,s,i=0,r=0){this.id=e,this.geometryType=t,this.materialKey=s,this.minZoom=i,this.maxZoom=r,this.meshData=null,this.symbolLevel=0,this.zOrder=0,this.vertexFrom=0,this.vertexCount=0,this.indexFrom=0,this.indexCount=0}get sortKey(){return void 0===this._sortKey&&this._computeSortKey(),this._sortKey}clone(){return this.copy()}copy(){const e=new pt(this.id,this.geometryType,this.materialKey);return e.vertexFrom=this.vertexFrom,e.vertexCount=this.vertexCount,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e.zOrder=this.zOrder,e.symbolLevel=this.symbolLevel,e.meshData=this.meshData,e.minZoom=this.minZoom,e.maxZoom=this.maxZoom,e}setMeshDataFromBuffers(e,t,s){const i=new ft;for(const r in t){const s=t[r].stride,n=t[r].data,a=[],o=Me(s);for(let t=0;t<s*e.vertexCount/o;++t)a[t]=n[t+s*e.vertexFrom/o];i.vertexData.set(r,a)}i.indexData.length=0;for(let r=0;r<e.indexCount;++r)i.indexData[r]=s[r+e.indexFrom]-e.vertexFrom;i.vertexCount=e.vertexCount,this.meshData=i}readMeshDataFromBuffers(e,t){this.meshData?this.meshData.clear():this.meshData=new ft;for(const s in e){const t=e[s].stride,i=e[s].data,r=[],n=Me(t);for(let e=0;e<t*this.vertexCount/n;++e)r[e]=i[e+t*this.vertexFrom/n];this.meshData.vertexData.set(s,r)}this.meshData.indexData.length=0;for(let s=0;s<this.indexCount;++s)this.meshData.indexData[s]=t[s+this.indexFrom]-this.vertexFrom;this.meshData.vertexCount=this.vertexCount}writeMeshDataToBuffers(e,t,s,i){for(const r in t){const s=t[r].stride,i=this.meshData.vertexData.get(r),n=t[r].data,a=Me(s);for(let t=0;t<s*this.meshData.vertexCount/a;++t)n[t+s*e/a]=i[t]}for(let r=0;r<this.meshData.indexData.length;++r)i[r+s]=this.meshData.indexData[r]+e;this.vertexFrom=e,this.vertexCount=this.meshData.vertexCount,this.indexFrom=s,this.indexCount=this.meshData.indexData.length}static writeAllMeshDataToBuffers(e,t,s){let i=0,r=0;for(const n of e)n.writeMeshDataToBuffers(i,t,r,s),i+=n.vertexCount,r+=n.indexCount}_computeSortKey(){this._sortKey=(31&this.symbolLevel)<<12|(127&this.zOrder)<<4|7&this.geometryType}serialize(e){return e.push(this.geometryType),e.push(this.materialKey),e.push(this.vertexFrom),e.push(this.vertexCount),e.push(this.indexFrom),e.push(this.indexCount),e.push(this.minZoom),e.push(this.maxZoom),e}static deserialize(e,t){const s=e.readInt32(),i=e.readInt32(),r=new pt(t.id,s,i);return r.vertexFrom=e.readInt32(),r.vertexCount=e.readInt32(),r.indexFrom=e.readInt32(),r.indexCount=e.readInt32(),r.minZoom=e.readInt32(),r.maxZoom=e.readInt32(),r}}function mt(e,t){if(null!==t){e.push(t.length);for(const s of t)s.serialize(e);return e}e.push(0)}class yt{constructor(e){this.insertAfter=null,this.id=e,this.displayRecords=[]}copy(){const e=new yt(this.id);return e.set(this),e}clone(){const e=new yt(this.id);return e.displayRecords=this.displayRecords.map((e=>e.clone())),e.insertAfter=this.insertAfter,e}set(e){this.id=e.id,this.displayRecords=e.displayRecords,this.insertAfter=e.insertAfter}serialize(e){return e.push(this.id),mt(e,this.displayRecords),e}static deserialize(e){const t=e.readInt32(),s=new yt(t),i={id:t};return s.displayRecords=function(e,t,s){const i=e.readInt32(),r=new Array(i);for(let n=0;n<r.length;n++)r[n]=t.deserialize(e,s);return r}(e,pt,i),s}}function gt(e,t,s,...i){t<e.length?e.splice(t,s,...i):e.push(...i)}const xt=new Map;xt.set(Oe.MAP,[Ue.FILL,Ue.LINE,Ue.MARKER,Ue.TEXT]),xt.set(Oe.LABEL,[Ue.LABEL]),xt.set(Oe.LABEL_ALPHA,[Ue.LABEL]);class _t{constructor(){this.symbolLevels=[]}replay(e,t,s){for(const i of this.symbolLevels)for(const r of i.zLevels){const i=r.geometryDPInfo.unified;if(i)for(const r of i){const i=e.painter.getGeometryBrush(r.geometryType),n=t.getGeometry(r.geometryType),a={geometryType:r.geometryType,materialKey:r.materialKey,indexFrom:r.indexFrom,indexCount:r.indexCount,draw:(e,t,s)=>{n.draw(e,t,s,r.indexFrom,r.indexCount)}};i.prepareState(e,t),i.drawGeometry(e,t,a,s)}}}get empty(){return!this.symbolLevels||0===this.symbolLevels.length}clear(){this.symbolLevels.length=0}addToList(e,t){if(Array.isArray(e))for(const s of e)this._addToList(s,t);else this._addToList(e,t)}removeFromList(e){Array.isArray(e)||(e=[e]);let t=null;for(const s of e)t=this._removeFromList(s);return t}clone(){const e=new _t;for(const t of this.symbolLevels)e.symbolLevels.push(t.clone());return e}splitAfter(e){const t=this._getDisplayList(e.symbolLevel,e.zOrder),s=t.length,i=e.indexFrom+e.indexCount;for(let r=0;r<s;++r){const s=t[r];if(s.geometryType===e.geometryType&&i>s.indexFrom&&i<=s.indexFrom+s.indexCount){if(i<s.indexFrom+s.indexCount){const e=new vt;e.geometryType=s.geometryType,e.materialKey=s.materialKey,e.indexFrom=i,e.indexCount=s.indexFrom+s.indexCount-i,t.splice(r+1,0,e),s.indexCount=i-s.indexFrom}return r}}}_addToList(e,t){const s=e.symbolLevel,i=e.zOrder,r=this._getDisplayList(s,i),n=null!=t?t:r.length-1,a=n>=0&&n<r.length?r[n]:null;if(null!==a&&a.materialKey===e.materialKey&&a.indexFrom+a.indexCount===e.indexFrom&&a.geometryType===e.geometryType)a.indexCount+=e.indexCount;else{const t=new vt;t.indexFrom=e.indexFrom,t.indexCount=e.indexCount,t.materialKey=e.materialKey,t.geometryType=e.geometryType,gt(r,n+1,0,t)}}_removeFromList(e){const t=e.symbolLevel,s=e.zOrder,i=this._getDisplayList(t,s),r=i.length;let n;for(let a=0;a<r;++a){const t=i[a];if(e.indexFrom+e.indexCount>t.indexFrom&&e.indexFrom<t.indexFrom+t.indexCount&&t.geometryType===e.geometryType){n=a;break}}if(void 0!==n){const t=i[n];if(e.indexFrom===t.indexFrom)return t.indexCount-=e.indexCount,t.indexFrom+=e.indexCount,0===t.indexCount&&gt(i,n,1),n-1;if(e.indexFrom+e.indexCount===t.indexFrom+t.indexCount)return t.indexCount-=e.indexCount,0===t.indexCount?(gt(i,n,1),n-1):n;{const s=t.indexFrom,r=e.indexFrom-t.indexFrom,a=e.indexCount,o=t.indexFrom+t.indexCount-(e.indexFrom+e.indexCount);t.indexCount=r;const l=new vt;return l.geometryType=t.geometryType,l.materialKey=t.materialKey,l.indexFrom=s+r+a,l.indexCount=o,gt(i,n+1,0,l),n}}return null}_getDisplayList(e,t){let s;const i=this.symbolLevels.length;for(let a=0;a<i;a++)if(this.symbolLevels[a].symbolLevel===e){s=this.symbolLevels[a];break}let r;s||(s=new wt,s.symbolLevel=e,this.symbolLevels.push(s));const n=s.zLevels.length;for(let a=0;a<n;a++)if(s.zLevels[a].zLevel===t){r=s.zLevels[a];break}return r||(r=new Dt,r.geometryDPInfo=new bt,r.zLevel=t,s.zLevels.push(r)),r.geometryDPInfo.unified||(r.geometryDPInfo.unified=[]),r.geometryDPInfo.unified}getDPInfoType(){return"unified"}}class vt{constructor(){this.materialKey=null,this.indexFrom=0,this.indexCount=0}clone(){const e=new vt;return e.geometryType=this.geometryType,e.materialKey=this.materialKey,e.indexFrom=this.indexFrom,e.indexCount=this.indexCount,e}}class bt{constructor(){this.fill=null,this.line=null,this.marker=null,this.text=null,this.label=null,this.unified=null}clone(){const e=new bt;return e.fill=this.fill&&this.fill.map((e=>e.clone())),e.line=this.line&&this.line.map((e=>e.clone())),e.marker=this.marker&&this.marker.map((e=>e.clone())),e.text=this.text&&this.text.map((e=>e.clone())),e.label=this.label&&this.label.map((e=>e.clone())),e.unified=this.unified&&this.unified.map((e=>e.clone())),e}}class Dt{constructor(){this.geometryDPInfo=new bt}clone(){const e=new Dt;return e.zLevel=this.zLevel,e.geometryDPInfo=this.geometryDPInfo.clone(),e}}class wt{constructor(){this.zLevels=[]}clone(){const e=new wt;e.symbolLevel=this.symbolLevel;for(const t of this.zLevels)e.zLevels.push(t.clone());return e}}class Bt{constructor(){}get displayObjectRegistry(){if(!this._displayObjectRegistry){this._displayObjectRegistry=new Map;for(const e of this.displayObjects)this._displayObjectRegistry.set(e.id,e)}return this._displayObjectRegistry}get displayList(){return this._displayList}computeDisplayList(){this._displayList=new _t;for(const e of this.displayObjects)for(const t of e.displayRecords)this._displayList.addToList(t)}clone(){const e=new Bt;return this.displayObjects&&(e.displayObjects=this.displayObjects.map((e=>e.clone()))),e}serialize(e){return mt(e,this.displayObjects),e}_deserializeObjects(e){const t=e.readInt32(),s=new Array(t),i=new Map;for(let r=0;r<s.length;++r){const t=yt.deserialize(e);s[r]=t,i.set(t.id,t)}this.displayObjects=s,this._displayList=null,this._displayObjectRegistry=i}static deserialize(e){const t=new Bt;return t._deserializeObjects(e),t}}class Ct{constructor(e,t){this.data=e,this.stride=t}static decode(e){const t=ze(e.data,e.stride),s=e.stride;return new Ct(t,s)}static fromVertexVector(e){const t=ze(e.data.buffer(),e.stride),s=e.stride;return new Ct(t,s)}}class Tt{constructor(e,t,s){this.geometryType=e,this.indexBuffer=new Uint32Array(t),this.namedBuffers=s}static decode(e){const t=e.geometryType,s=e.indexBuffer,i={};for(const r in e.namedBuffers)i[r]=Ct.decode(e.namedBuffers[r]);return new Tt(t,s,i)}static fromVertexData(e,t){const s=e.indices,i=ze(e.vertices,e.stride),r=e.stride,n={geometry:new Ct(i,r)};return new Tt(t,s,n)}static fromVertexVectors(e){const t=e.geometryType,s=e.indexVector.buffer(),i={};for(const r in e.namedVectors)i[r]=Ct.fromVertexVector(e.namedVectors[r]);return new Tt(t,s,i)}}class Ft{constructor(e,t){this.data=e,this.stride=t}get vertexCount(){const e=this.stride/4,t=this.data.length/e;return t!==(0|t)&&console.debug("Corrupted stride"),t}transfer(e,t){const s=this.data.buffer();e.vertexCount=this.vertexCount,e.data=s,e.stride=this.stride,t.push(s)}}class Lt{constructor(e,t,s=!1){this.geometryType=e,this.indexVector=new be(Uint32Array,6*t),this.namedVectors={};const i=je(e,s);for(const r in i){const e=i[r];let s;switch(e%4){case 0:case 2:s=new be(Uint32Array,e*t);break;case 1:case 3:s=new be(Uint8Array,e*t)}this.namedVectors[r]=new Ft(s,e)}}get(e){return this.namedVectors[e].data}getVector(e){return this.namedVectors[e]}transfer(e,t){const s=this.indexVector.buffer(),i={};t.push(s);for(const r in this.namedVectors){const e=this.namedVectors[r];i[r]={},e.transfer(i[r],t)}e.geometryType=this.geometryType,e.indexBuffer=s,e.namedBuffers=i,this.destroy()}intoBuffers(){const e=Tt.fromVertexVectors(this);return this.destroy(),e}destroy(){this.indexVector=null,this.namedVectors=null}}const It=new ct,Rt=new ct;function St(e,t){const s={};for(const i in e){const r={data:Se(t,e[i]),stride:e[i]};s[i]=r}return s}class Mt{constructor(){this.tileDisplayData=null,this.tileBufferData=null}reshuffle(){It.reset();const e=function(e){const t=[[],[],[],[],[]],s=e;for(const i of s)for(const e of i.displayRecords)t[e.geometryType].push(e);return t}(this.tileDisplayData.displayObjects);for(const i of e)for(const e of i)e&&It.needMore(e.geometryType,e.meshData?e.meshData.vertexCount:e.vertexCount,e.meshData?e.meshData.indexData.length:e.indexCount);const t=e.length,s=new ut;for(let i=0;i<t;++i){s.geometries[i].indexBuffer=new Uint32Array(Math.round(1.5*It.indicesFor(i)));const e=[];for(const s in this.tileBufferData.geometries[i].vertexBuffer)e.push(this.tileBufferData.geometries[i].vertexBuffer[s].stride);const t=Mt._computeVertexAlignment(e),r=Math.round(1.5*It.verticesFor(i)),n=Mt._align(r,t);for(const a in this.tileBufferData.geometries[i].vertexBuffer){const e=this.tileBufferData.geometries[i].vertexBuffer[a].stride;s.geometries[i].vertexBuffer[a]={stride:e,data:Se(n,e)}}}Rt.reset(),this.tileDisplayData.displayList.clear();for(let i=0;i<t;++i){const t=e[i];for(const e of t){if(e.meshData)e.writeMeshDataToBuffers(Rt.verticesFor(i),s.geometries[i].vertexBuffer,Rt.indicesFor(i),s.geometries[i].indexBuffer),e.meshData=null;else{const t=this.tileBufferData.geometries[i].vertexBuffer,r=this.tileBufferData.geometries[i].indexBuffer,n=s.geometries[i].vertexBuffer,a=s.geometries[i].indexBuffer,o=Rt.verticesFor(i),l=Rt.indicesFor(i);Ae(o,l,n,a,e,t,r),e.vertexFrom=o,e.indexFrom=l}Rt.needMore(i,e.vertexCount,e.indexCount)}}for(const i of this.tileDisplayData.displayObjects)this.tileDisplayData.displayList.addToList(i.displayRecords);this.tileBufferData=s}getStrides(){const e=[];for(let t=0;t<this.tileBufferData.geometries.length;++t){const s=this.tileBufferData.geometries[t];e[t]={};for(const i in s.vertexBuffer)e[t][i]=s.vertexBuffer[i].stride}return e}clone(){const e=new Mt;return e.tileBufferData=this.tileBufferData.clone(),e.tileDisplayData=this.tileDisplayData.clone(),e}_guessSize(){const{displayObjects:e}=this.tileDisplayData,t=Math.min(e.length,4);let s=0;for(let i=0;i<t;i++)s=Math.max(s,e[i].displayRecords.length);return 2*(12*e.length+e.length*s*40)}serialize(){const e=this.tileBufferData.serialize(),t=this.tileBufferData.getBuffers(),s=this.tileDisplayData.serialize(new be(Int32Array,this._guessSize())).buffer();return t.push(s),{result:{displayData:s,bufferData:e},transferList:t}}static fromVertexData(e){const t=[],s={},i=new Map;return Pe((r=>{const n=e.data[r];if(x(n)){const e=De.from(n.records).getCursor();for(;e.next();){const s=e.id,n=e.materialKey,a=e.insertAfter,o=e.indexFrom,l=e.indexCount,d=e.vertexFrom,h=e.vertexCount;if(!i.has(s)){const e=new yt(s);e.insertAfter=a,i.set(s,e),t.push(e)}const c=i.get(s),u=new pt(s,r,n);u.indexFrom=o,u.indexCount=l,u.vertexFrom=d,u.vertexCount=h,c.displayRecords.push(u)}s[r]=Tt.fromVertexData(n,r)}else s[r]=new Lt(r,0).intoBuffers()})),t.sort(((e,t)=>e.id-t.id)),Mt.fromMeshData({displayObjects:t,vertexBuffersMap:s})}static fromMeshData(e){const t=new Mt,s=new Bt,i=new ut;s.displayObjects=e.displayObjects;for(const r in e.vertexBuffersMap){const t=e.vertexBuffersMap[r];i.geometries[r].indexBuffer=t.indexBuffer,i.geometries[r].vertexBuffer=t.namedBuffers}return t.tileDisplayData=s,t.tileBufferData=i,t}static bind(e,t){const s=new Mt;return s.tileDisplayData=e,s.tileBufferData=t,s}static create(e,t){const s=new Mt;s.tileDisplayData=new Bt,s.tileDisplayData.displayObjects=e;const i=[0,0,0,0,0],r=[0,0,0,0,0],n=[[],[],[],[],[]];for(const l of e)for(const e of l.displayRecords)n[e.geometryType].push(e),i[e.geometryType]+=e.meshData.vertexCount,r[e.geometryType]+=e.meshData.indexData.length;const a=new ut,o=function(e){return[e.fill||{},e.line||{},e.icon||{},e.text||{},e.label||{}]}(t);for(let l=0;l<5;l++){const e=new Uint32Array(r[l]),t=St(o[l],i[l]);pt.writeAllMeshDataToBuffers(n[l],t,e),a.geometries[l]={indexBuffer:e,vertexBuffer:t}}return s.tileBufferData=a,s}static _align(e,t){const s=e%t;return 0===s?e:e+(t-s)}static _computeVertexAlignment(e){let t=!1,s=!1;for(const i of e)i%4==2?t=!0:i%4!=0&&(s=!0);return s?4:t?2:1}}class At extends qe{constructor(e,t){super(e,t,null)}static from(e){const t=Ye.createInstance(),s=[],i=e.filter((e=>!!e.geometry));for(const r of i){const e=_(r.geometry);v(s,[r],e,!1,!1,"uid")}return new At(t,s)}get geometryType(){const e=this._current;return e?e.geometryType:null}get insertAfter(){return this._current.insertAfter}readGraphic(){return this._current}getCursor(){return this.copy()}copy(){const e=new At(this.instance,this._features);return this.copyInto(e),e}}const Gt=new I,zt=new I,Ot="esriGeometryPolyline";function Ut(e){e.coords.length=0,e.lengths.length=0}class jt{constructor(){this.bounds=a(),this.graphic=null,this.size=[0,0,0,0]}static acquire(e=null,t,s,i,r,n){let a;return 0===jt._pool.length?a=new jt:(a=jt._pool.pop(),this._set.delete(a)),a.acquire(e,t,s,i,r,n),a}static release(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))}static getCentroidQuantized(e,t){if(u(e.geometry)){const s=e.symbol;if(b(s))return null;if(oe(s.type)||le(s.type)){const s=D(e.geometry);return w(t,{},{x:s[0],y:s[1]},!1,!1)}}return null}acquire(e=null,t,s,i,r,n){e&&this.set(e,t,s,i,r,n)}release(){this.graphic=null,this.symbolResource=null,this.geometry=null}get symbol(){return this.symbolResource.symbol}set(e,t,s,i,r,n){this.graphic=e,this.geometry=s,this.symbolResource=t,this.updateBounds(i,r,n)}updateBounds(e,t,s){de(this.bounds,this.size,this.symbolResource,this.geometry,e,t,s)}getGeometryQuantized(e){if(u(this.geometry)){const t=this.geometry.rings;if(1===t.length&&2===t[0].length)return B(e,{paths:[[t[0][0],t[0][1]]]})}else if(f(this.geometry))return Ut(Gt),Ut(zt),C(Gt,this.geometry),T(zt,Gt,this.geometry.hasZ,this.geometry.hasM,Ot,e.scale[0]),F(Gt,zt,this.geometry.hasZ,this.geometry.hasM,Ot,e),L(Gt,this.geometry.hasZ,this.geometry.hasM);return B(e,this.geometry)}}jt._pool=[],jt._set=new Set;const Pt={minX:0,minY:0,maxX:0,maxY:0},Vt=a(),kt=[],Kt=1e-5;function Et(e,t,s,i,r){return Pt.minX=t,Pt.minY=s,Pt.maxX=i,Pt.maxY=r,e.search(Pt)}class qt{constructor(e,t,s,i,r,n){this._graphics=i,this._onAdd=r,this._onRemove=n,this._index=He(9,R("csp-restrictions")?e=>({minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}):[".bounds[0]",".bounds[1]",".bounds[2]",".bounds[3]"]),this._itemByGraphic=new Map,this._currentLevel=-1/0,this._tileInfoView=e,this._uidFieldName=s;const a=e.getClosestInfoForScale(t);a&&(this._currentLevel=a.level,this._resolution=this._tileInfoView.getTileResolution(a.level));const o=e.spatialReference;this._metersPerUnit=S(o)?M(e.spatialReference):1}hitTest(e,t,s,i,r){e=A(e,this._tileInfoView.spatialReference);const n=.5*i*s;Vt[0]=e-n,Vt[1]=t-n,Vt[2]=e+n,Vt[3]=t+n;const a=.5*i*(s+me),o=Et(this._index,e-a,t-a,e+a,t+a);if(!o||0===o.length)return[];const l={x:e,y:t},d=[];let h;for(const c of o)if(c.graphic.visible)switch(_(c.geometry)){case"esriGeometryPoint":{const e=c.symbol;if(!e)continue;const t=c.geometry,{x:s,y:n}=t,a=i*this._metersPerUnit;let o;switch(e.type){case"esriTS":o=he(s,n,e,c.size,i,r);break;case"expanded-cim":o=fe(s,n,e,i,a,r);break;case"esriSMS":case"esriPMS":o=ce(s,n,e,i,a,r)}G(o,l)&&d.push(c)}break;case"esriGeometryPolyline":{const s=c.symbol;if(!s||!s.layers.length)continue;const r=s.layers[0];h=1.5*i*window.devicePixelRatio*j(r.width),ue(c.geometry,e,t,h)&&d.push(c)}break;case"esriGeometryEnvelope":{const e=c.geometry,t=O(e.xmin,e.ymin,e.xmax,e.ymax);U(t,Vt)&&d.push(c);break}case"esriGeometryPolygon":{if(G(c.geometry,l)){d.push(c);break}const e=z(c.geometry);if(Math.abs(e.ymax-e.ymin)<5*i||Math.abs(e.xmax-e.xmin)<5*i){const t=O(e.xmin,e.ymin,e.xmax,e.ymax);U(t,Vt)&&d.push(c)}break}case"esriGeometryMultipoint":{const e=c.symbol;if(!e)continue;const t=c.geometry.points;let s;for(let n=0;n<t.length;n++)if(s="esriTS"===e.type?he(t[n][0],t[n][1],e,c.size,i,r):ce(t[n][0],t[n][1],e,i,i*this._metersPerUnit,r),G(s,l)){d.push(c);break}break}}return d.sort(((e,t)=>{const s=pe(e.graphic),i=pe(t.graphic);return s===i?t.zorder-e.zorder:s-i})),d.map((e=>e.graphic))}getGraphicsData(e,t,s){const i=this._searchForItems(t);if(0===i.length||0===s.length)return[];i.sort(((e,t)=>e.zorder-t.zorder)),i[0].insertAfter=-1;for(let n=1;n<i.length;n++)i[n].insertAfter=i[n-1].graphic.uid;i.sort(((e,t)=>e.graphic.uid-t.graphic.uid)),s.sort(((e,t)=>e.uid-t.uid));let r,a=0,o=0;const l=[],d={originPosition:"upperLeft",scale:[t.resolution,t.resolution],translate:[t.bounds[0],t.bounds[3]]};for(const h of s){for(o=-2;a<i.length;)if(r=i[a],a++,h.uid===r.graphic.uid){o=r.insertAfter;break}if(!r.geometry||-2===o)continue;const t=r.getGeometryQuantized(d),s=n({},r.graphic.attributes);s[this._uidFieldName]=h.uid,null==r.groupId&&(r.groupId=e.createTemplateGroup(r.symbol,null)),l.push({centroid:jt.getCentroidQuantized(r,d),geometry:t,attributes:s,symbol:r.symbol,groupId:r.groupId,insertAfter:o,zorder:r.zorder})}return l.sort(((e,t)=>e.zorder-t.zorder)),l}queryTileData(e,t){const{bounds:s,resolution:i}=t,r=this._searchForItems(t),n=[];return this._createTileGraphics(n,e,r,{originPosition:"upperLeft",scale:[i,i],translate:[s[0],s[3]]}),n}has(e){return this._itemByGraphic.has(e)}getBounds(e){return this._itemByGraphic.has(e)?this._itemByGraphic.get(e).bounds:null}addOrModify(e,t,s){if(!e)return;this.has(e)&&this.remove(e),this._onAdd(e);const i=jt.acquire(e,t,s,this._resolution,this._resolution*this._metersPerUnit,this._tileInfoView.spatialReference);return this._itemByGraphic.set(e,i),s&&this._index.insert(i),i.bounds}remove(e){if(!this._itemByGraphic.has(e))return;this._onRemove(e);const t=this._itemByGraphic.get(e);this._index.remove(t),this._itemByGraphic.delete(e)}updateZ(){const e=this._graphics.items;let t,s;for(let i=0;i<e.length;i++)s=e[i],t=this._itemByGraphic.get(s),t&&(t.zorder=i)}update(e,t,s){const i=this._itemByGraphic.get(e);i.groupId=null;const r=P(i.bounds);return i.size[0]=i.size[1]=0,this._index.remove(i),i.set(e,t,s,this._resolution,this._resolution*this._metersPerUnit,this._tileInfoView.spatialReference),s&&this._index.insert(i),{oldBounds:r,newBounds:i.bounds}}updateLevel(e){if(this._currentLevel===e)return;this._currentLevel=e;const t=this._tileInfoView.getTileResolution(e);this._resolution=t,this._index.clear(),kt.length=0,this._itemByGraphic.forEach((e=>{e.updateBounds(this._resolution,this._resolution*this._metersPerUnit,this._tileInfoView.spatialReference),e.geometry&&kt.push(e)})),this._index.load(kt)}clear(){this._itemByGraphic.clear(),this._index.clear()}_createTileGraphics(e,t,s,i){const r=this._uidFieldName;let a,o,l,d;s.sort(((e,t)=>e.zorder-t.zorder));for(let h=0;h<s.length;h++){l=s[h],a=l.graphic,o=l.getGeometryQuantized(i),d=0===h?-1:s[h-1].graphic.uid;const c=n({},l.graphic.attributes);c[r]=a.uid,null==l.groupId&&(l.groupId=t.createTemplateGroup(l.symbol,null)),e.push({centroid:jt.getCentroidQuantized(l,i),geometry:o,attributes:c,symbol:l.symbol,groupId:l.groupId,insertAfter:d,zorder:l.zorder})}}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds;if(t.isWrappable){const[i,r]=V(t),n=Math.abs(s[2]-r)<Kt,o=Math.abs(s[0]-i)<Kt;if((!n||!o)&&(n||o)){const t=e.resolution;let o;o=a(n?[i,s[1],i+t*me,s[3]]:[r-t*me,s[1],r,s[3]]);const l=Et(this._index,s[0],s[1],s[2],s[3]),d=Et(this._index,o[0],o[1],o[2],o[3]);return[...new Set([...l,...d])]}}return Et(this._index,s[0],s[1],s[2],s[3])}}const Ht=e=>{let t=class extends(q(e)){constructor(){super(...arguments),this.graphics=null,this.renderer=null,this.view=null}};return k([K()],t.prototype,"graphics",void 0),k([K()],t.prototype,"renderer",void 0),k([K()],t.prototype,"updating",void 0),k([K()],t.prototype,"view",void 0),t=k([E("esri.views.layers.GraphicsView")],t),t};function Nt(e,t,s){if(s.has(e))return s.get(e);const i={tile:t,addedOrModified:[],removed:[]};return s.set(e,i),i}let Zt=class extends(Ht(H(N))){constructor(e){super(e),this._storage=new Ne,this._displayIds=new Map,this._tiles=new Map,this._graphicStoreUpdate=!1,this._graphicsSet=new Set,this._matcher=Promise.resolve(null),this._tileUpdateSet=new Set,this._tilesToUpdate=new Map,this._graphicIdToAbortController=new Map,this._attached=!1,this._highlightIds=new Map,this._updatingGraphicsTimer=null,this._hashToExpandedSymbol=new Map,this._hashTpExpandedSymbolPromise=new Map,this._processing=!1,this._needsProcessing=!1,this._pendingUpdate={added:new Set,updated:new Set,removed:new Set},this.lastUpdateId=-1,this.updateRequested=!1,this.graphicUpdateHandler=this.graphicUpdateHandler.bind(this)}_createMatcher(e,t){if(e){const s=ye({indexCount:0,fields:{}},"feature",e);this._matcher=we(s,t,null)}}_createDisplayId(e){return this._displayIds.has(e)||this._displayIds.set(e,this._storage.createDisplayId()),this._displayIds.get(e)}initialize(){this._tileStore=new Ze(this.view.featuresTilingScheme),this._attributeStore=new Xe({type:"local",initialize:e=>Promise.resolve(this.container.attributeView.initialize(e)),update:e=>this.container.attributeView.requestUpdate(e),render:()=>this.container.requestRender()},Z());this._graphicStore=new qt(this.view.featuresTilingScheme,this.view.state.scale,this.uid,this.graphics,(e=>{this._createDisplayId(e.uid),this._setFilterState(e.uid,e.visible)}),(e=>{const t=this._displayIds.get(e.uid);this._displayIds.delete(e.uid),this._storage.releaseDisplayId(t)}));const e=new Be(this.container.getMaterialItems.bind(this.container),!0);this._createMatcher(this.renderer,e),this._meshFactory=new Ce(null,this.uid,e),this._templateStore=e,this.watch("renderer",(t=>{this._createMatcher(t,e);for(const e of this.graphics)this._pendingUpdate.updated.add(e);this.requestUpdate()})),this._tileStore.on("update",this._onTileUpdate.bind(this)),this.container.on("attach",(()=>{this.graphics.items.length>0&&this._graphicsChangeHandler({target:this.graphics,added:this.graphics.items,removed:[],moved:[]}),this.handles.add(this.graphics.on("change",(e=>this._graphicsChangeHandler(e))),"graphics"),this._attached=!0,this.notifyChange("updating")}))}destroy(){this._updatingGraphicsTimer&&(clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=null,this.notifyChange("updating")),this.container.destroy(),this._set("graphics",null),this._graphicStore.clear(),this._tileStore.destroy(),this._attributeStore=null,this._hashToExpandedSymbol.clear(),this.view=null,this.renderer=null}get updating(){return!this._attached||null!==this._updatingGraphicsTimer||this._tileUpdateSet.size>0||this._tilesToUpdate.size>0}hitTest(e,t){if(!this.view||!this.view.position)return Promise.resolve(null);const s=this.view.toMap(X(e,t));return this.searchFeatures(s).then((e=>e&&e.length?e[0]:null))}async searchFeatures(e,t=2){return this._graphicStore.hitTest(e.x,e.y,t,this.view.state.resolution,this.view.state.rotation)}update(e){const t=e.state,s=this.view.featuresTilingScheme.getClosestInfoForScale(t.scale).level;if(this._graphicStore.updateLevel(s),this._tileStore.setViewState(t),this._graphicStoreUpdate=!0,this.updateRequested=!1,this._pendingUpdate.updated.size>0){if(!this._processing)return void this._updateGraphics();this._needsProcessing=!0}}viewChange(){this.requestUpdate()}requestUpdate(){this.updateRequested||(this.updateRequested=!0,this.requestUpdateCallback())}processUpdate(e){this.updateRequested&&(this.updateRequested=!1,this.update(e))}graphicUpdateHandler(e){const{graphic:t,property:s,newValue:i}=e;switch(s){case"attributes":break;case"geometry":case"symbol":this._pendingUpdate.updated.add(t),this.requestUpdate();break;case"visible":this._setFilterState(t.uid,i),this._attributeStore.sendUpdates()}}addHighlight(e){for(const t of e)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}removeHighlight(e){for(const t of e)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;0===e?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const e=Array.from(this._highlightIds.keys()),t=e.map((e=>this._displayIds.get(e)));this._attributeStore.setHighlight(e,t)}_getIntersectingTiles(e){const t=this._graphicStore.getBounds(e);if(!t||0===Y(t)||0===J(t))return[];const s=ge(t,this.view.spatialReference);return x(s)?[...this._tileStore.boundsIntersections(s[0]),...this._tileStore.boundsIntersections(s[1])]:this._tileStore.boundsIntersections(t)}async _updateTile(e){const t=e.tile,s=this._getGraphicsData(this._templateStore,t,e.addedOrModified),i=await this._processGraphics(t,s);return this._patchTile(t.key,{type:"update",addOrUpdate:i,remove:e.removed,end:!0,clear:!1}),i}_patchTile(e,t){if(!this._tiles.has(e))return;const s=this._tiles.get(e);this.container.onTileData(s,t),this.container.requestRender()}_graphicsChangeHandler(e){for(const t of e.added)this._pendingUpdate.added.add(t);for(const t of e.moved)this._pendingUpdate.added.add(t);for(const t of e.removed)this._pendingUpdate.added.has(t)?this._pendingUpdate.added.delete(t):this._pendingUpdate.removed.add(t);this._processing?this._needsProcessing=!0:this._updateGraphics()}_getGraphicsToUpdate(){const e={added:[],removed:[],updated:[]};if(!this.graphics)return e;const t=this._pendingUpdate;for(const s of this.graphics.items)t.added.has(s)?e.added.push(s):t.updated.has(s)&&e.updated.push(s);for(const s of t.removed)this._graphicStore.has(s)&&e.removed.push(s);return t.added.clear(),t.removed.clear(),t.updated.clear(),e}async _updateGraphics(){this._processing=!0;const{added:e,removed:t,updated:s}=this._getGraphicsToUpdate(),i=this._tilesToUpdate;let r;try{if(!this._graphicStoreUpdate){const e=this.view.state,t=this.view.featuresTilingScheme.getClosestInfoForScale(e.scale).level;this._graphicStore.updateLevel(t),this._tileStore.setViewState(e)}const n=[],a=new Array(e.length+t.length);for(let e=0;e<s.length;e++){const t=s[e],o=this._getIntersectingTiles(t);for(const e of o)r=e.id,Nt(r,e,i).removed.push(this._displayIds.get(t.uid));n.push(this._updateGraphic(t,null)),a[e]=t}const o=s.length;for(let t=0;t<e.length;t++){const s=e[t];a[o+t]=s,this._graphicsSet.add(s),n.push(this._addGraphic(s))}for(const e of t){this._abortProcessingGraphic(e.uid);const t=this._getIntersectingTiles(e);for(const s of t)r=s.id,Nt(r,s,i).removed.push(this._displayIds.get(e.uid));this._graphicsSet.delete(e),this._graphicStore.remove(e)}let l;this._flipUpdatingGraphics(),await Promise.all(n);for(let e=0;e<a.length;e++){l=a[e];const t=this._getIntersectingTiles(l);for(const e of t)r=e.id,Nt(r,e,i).addedOrModified.push(l)}this._graphicStore.updateZ();const d=[];for(const[e,t]of i)d.push(this._updateTile(t));await Promise.all(d)}catch(n){}for(const a of t){const e=await this._getSymbolForGraphic(a,{});e&&this._hashToExpandedSymbol.delete(e.hash())}i.clear(),this.notifyChange("updating"),this._processing=!1,this._needsProcessing&&(this._needsProcessing=!1,this._updateGraphics())}_getArcadeInfo(e){const t=(e.attributes?Object.keys(e.attributes):[]).map((t=>({name:t,alias:t,type:"string"==typeof e.attributes[t]?"esriFieldTypeString":"esriFieldTypeDouble"})));return b(e.geometry)?null:{geometryType:_(e.geometry),spatialReference:Q.fromJSON(e.geometry.spatialReference),fields:t}}async _getSymbolForGraphic(e,t){return x(e.symbol)?e.symbol:x(this.renderer)?this.renderer.getSymbolAsync(e,{scale:this.view.scale,abortOptions:t}):this._getNullSymbol(e)}async _getSymbolResources(e,t){if(!this.container.stage)return Promise.resolve(null);const s=await this._getSymbolForGraphic(e,t),i=s.hash();let r=this._hashToExpandedSymbol.get(i);if(!r){let a=this._hashTpExpandedSymbolPromise.get(i);if(a)r=await a;else{const o=this._getArcadeInfo(e),l=xe(s);a=Te(l,o,t),this._hashTpExpandedSymbolPromise.set(i,a);try{r=await a,this._hashTpExpandedSymbolPromise.delete(i),this._hashToExpandedSymbol.set(i,r)}catch(n){this._hashTpExpandedSymbolPromise.delete(i),W(n)}}}if("esriTS"===r.type){const e=[],[t]=_e(r.text);for(let r=0;r<t.length;r++)e.push(t.charCodeAt(r));const s={symbol:r,id:0,glyphIds:e},[{mosaicItem:i}]=await this.container.getMaterialItems([s]);return{symbol:r,mosaicItem:i}}return{symbol:r,mosaicItem:null}}async _projectAndNormalizeGeometry(e,t){if(b(e.geometry)||"mesh"===e.geometry.type)return Promise.resolve(null);let s=e.geometry;if(u(s)){const e=s.rings;s.rings=e}else if(f(s)){const e=s.paths;s.paths=e}else if(c(s)){const i=await this._getSymbolForGraphic(e,t);s=oe(i.type)||le(i.type)?s.center:$.fromExtent(s)}await Le(s.spatialReference,this.view.spatialReference);const i=Je(s),r=Ie(i,s.spatialReference,this.view.spatialReference);return ee(r),r}_onTileUpdate(e){const t=o(this.view.spatialReference);if(e.added&&e.added.length>0)for(const s of e.added)this._addNewTile(s,t);if(e.removed&&e.removed.length>0)for(const s of e.removed)this._removeTile(s.key)}async _addGraphic(e){this._abortProcessingGraphic(e.uid);const t=te();this._graphicIdToAbortController.set(e.uid,t);const s={signal:t.signal};try{await this._addOrUpdateGraphic(e,s),this._graphicIdToAbortController.delete(e.uid)}catch(i){if(this._graphicIdToAbortController.delete(e.uid),!se(i))throw i}}async _updateGraphic(e,t){const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t),[r,n]=await Promise.all([s,i]);this._graphicStore.addOrModify(e,n,r)}async _addOrUpdateGraphic(e,t){const s=this._projectAndNormalizeGeometry(e,t),i=this._getSymbolResources(e,t);try{const[t,r]=await Promise.all([s,i]);this._addProjectedGraphic(e,r,t)}catch(r){if(!se(r))throw r}}_addProjectedGraphic(e,t,s){this._graphicsSet.has(e)&&this._graphicStore.addOrModify(e,t,s)}_addTile(e){const t=this.view.featuresTilingScheme.getTileBounds(a(),e),s=new ht(e,t);return this._tiles.set(e,s),this.container.addChild(s),s}_addNewTile(e,t){const s=this._addTile(e.key),i=this._graphicStore.queryTileData(this._templateStore,e);if(t){const s=Math.round((t.valid[1]-t.valid[0])/e.resolution);for(const e of i)e.geometry&&(d(e.geometry)||h(e.geometry))&&this._wrapPoints(e,s)}const r=e.key;this._tileUpdateSet.add(e.key),this.notifyChange("updating"),this._processGraphics(e,i).then((e=>{const t={type:"update",clear:!1,addOrUpdate:e,remove:[],end:!0};s.patch(t),this._tileUpdateSet.delete(r),this.notifyChange("updating")})).catch((e=>{if(this._tileUpdateSet.delete(r),this.notifyChange("updating"),!se(e))throw e}))}_removeTile(e){if(!this._tiles.has(e))return;const t=this._tiles.get(e);this.container.removeChild(t),t.destroy(),this._tiles.delete(e)}_setFilterState(e,t){const s=this._displayIds.get(e),i=this._attributeStore.getHighlightFlag(e);this._attributeStore.setData(s,0,0,i|(t?ae:0))}_getGraphicsData(e,t,s){const i=o(this.view.spatialReference),r=this._graphicStore.getGraphicsData(e,t,s);if(i){const e=Math.round((i.valid[1]-i.valid[0])/t.resolution);for(const t of r)t.geometry&&(d(t.geometry)||h(t.geometry))&&this._wrapPoints(t,e)}return r}_wrapPoints(e,t){const s=e.geometry;h(s)?this._wrapMultipoint(s,t):this._wrapPoint(e,t)}_wrapMultipoint(e,t){const s=e.points,i=[];let r=0,n=0;for(const[a,o]of s){if(i.push([a+r,o]),r=0,t===ve){const e=5*me;a+n<e?(i.push([t,0]),r=-t):a+n>ve-e&&(i.push([-t,0]),r=t)}else a+n<-me?(i.push([t,0]),r=-t):a+n>ve+me&&(i.push([-t,0]),r=t);n+=a}e.points=i}_wrapPoint(e,t){const s=e.geometry;if(t===ve){const i=5*me;s.x<i?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>ve-i&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}else s.x<-me?e.geometry={points:[[s.x,s.y],[t,0]]}:s.x>ve+me&&(e.geometry={points:[[s.x,s.y],[-t,0]]})}async _processGraphics(e,t,s){if(!t||!t.length||!this._meshFactory)return null;const i=At.from(t),r=this._meshFactory,n=await this._matcher;return await r.analyzeGraphics(i,n,null,null,s),this._attributeStore.sendUpdates(),this._processAnalyzedGraphics(e,i)}_processAnalyzedGraphics(e,t){const s=this._meshFactory,i=t.getApproximateSize(),r=t.getCursor(),n={features:i,records:i,metrics:0},a=new Fe(e.key.id,n,!1,!1,!1);for(;r.next();){const e=r.readGraphic();e.insertAfter=-1===e.insertAfter?-1:this._displayIds.get(e.insertAfter),e.displayId=this._displayIds.get(e.attributes[this.uid]),s.writeGraphic(a,r)}const o=e.tileInfoView.tileInfo.isWrappable,l=a.serialize(o);if(1!==l.length)return new Mt;const d=l[0].message;return Mt.fromVertexData(d)}_abortProcessingGraphic(e){this._graphicIdToAbortController.has(e)&&this._graphicIdToAbortController.get(e).abort()}_getNullSymbol(e){const t=e.geometry;return f(t)?ie:u(t)||c(t)?re:ne}_flipUpdatingGraphics(){this._updatingGraphicsTimer&&clearTimeout(this._updatingGraphicsTimer),this._updatingGraphicsTimer=setTimeout((()=>{this._updatingGraphicsTimer=null,this.notifyChange("updating")}),160),this.notifyChange("updating")}};k([K({constructOnly:!0})],Zt.prototype,"requestUpdateCallback",void 0),k([K()],Zt.prototype,"container",void 0),k([K({constructOnly:!0})],Zt.prototype,"graphics",void 0),k([K()],Zt.prototype,"updating",null),k([K()],Zt.prototype,"view",void 0),k([K()],Zt.prototype,"updateRequested",void 0),Zt=k([E("esri.views.2d.layers.support.GraphicsView2D")],Zt);var Xt=Zt;class Yt extends Ee{constructor(e){super(e)}get hasLabels(){return!1}get labelsVisible(){return!1}onTileData(e,t){e.patch(t),this.contains(e)||this.addChild(e),this.requestRender()}onTileError(e){e.clear(),this.contains(e)||this.addChild(e)}_renderChildren(e,t){for(const s of this.children)s.isReady&&s.hasData&&(s.commit(e),e.context.setStencilFunction(514,s.stencilRef,255),s._displayList.replay(e,s,t))}}export{Xt as e,Yt as t};
