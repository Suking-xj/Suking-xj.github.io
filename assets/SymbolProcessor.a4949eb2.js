import{p as e,D as t,F as s,c5 as r,e7 as a,H as i,N as o,r as n,b3 as c,V as l,t as d,fi as m,L as f,br as h}from"./vendor.d5722712.js";import{g as u}from"./definitions.6737c10c.js";import{n as p}from"./schemaUtils.4fd6ed1f.js";import{l as y}from"./CollisionGrid.04b37aa8.js";import{t as g}from"./Utils.7d3ca496.js";import{b,k as _,s as v,i as j,E as D,f as k}from"./WGLMeshFactory.5afa6643.js";import{v as w}from"./ComputedAttributeStorage.93585dd8.js";import{p as T}from"./BaseProcessor.bc3b0c98.js";import"./MD5.1ef35834.js";import"./MaterialKey.0738772f.js";import"./visualVariablesUtils.d402ff0b.js";import"./Rect.b51904ac.js";import"./BidiEngine.9b392b22.js";import"./FeatureSetReader.0caf98f1.js";import"./centroid.93c1b848.js";import"./FramebufferObject.3fdde870.js";import"./_commonjsHelpers.f2a458db.js";import"./tileUtils.c4967458.js";import"./visualVariablesUtils.33d8906d.js";import"./TurboLine.ec0cebd3.js";import"./GeometryUtils.9c8423f5.js";import"./quantizationUtils.752d3fe4.js";import"./json.7989af9b.js";import"./quickselect.e4940b29.js";function S(e){const t=e.message,s={message:{data:{},tileKey:t.tileKey},transferList:new Array};for(const r in t.data){const e=t.data[r];if(s.message.data[r]=null,n(e)){const t=e.stride,a=e.indices.slice(0),i=e.vertices.slice(0),o=e.records.slice(0),n={stride:t,indices:a,vertices:i,records:o,metrics:l(e.metrics,(e=>e.slice(0)))};s.transferList.push(a,i,o),s.message.data[r]=n}}return s}e.getLogger("esri.views.2d.layers.features.processors.SymbolProcessor");let C=class extends T{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}destroy(){}get supportsTileUpdates(){return!0}async update(e,t){const s=t.schema.processors[0];if("symbol"!==s.type)return;const o=r(this._schema,s);a(o,"mesh")&&(i("esri-2d-update-debug")&&console.debug("Applying Update - Processor:",o),e.mesh=!0,e.why.mesh.push("Symbology changed"),this._schema=s,this._factory=this._createFactory(s),this._factory.update(s,this.tileStore.tileScheme.tileInfo))}onTileMessage(e,t,s,r){return o(r),this._onTileData(e,t,s,r)}onTileClear(e){return this._bufferData.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:{clear:!0}})}onTileError(e,t,s){const r=s.signal,a={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",a,{signal:r})}onTileUpdate(e){for(const t of e.removed)this._bufferData.has(t.key.id)&&(this._bufferData.get(t.key.id).forEach((e=>{const t=new Set;g((s=>{const r=e.message.data[s];if(n(r)){const e=b.from(r.records).getCursor();for(;e.next();)t.add(e.id)}}));const s=e.message.tileKey;return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:s,data:{type:"update",addOrUpdate:null}})})),this._bufferData.delete(t.key.id));for(const t of e.added)this._bufferData.forEach((e=>{for(const s of e)s.message.tileKey===t.id&&this._updateTileMesh("append",t,S(s),[],!1,!1,null)}))}_addBufferData(e,t){this._bufferData.has(e)||this._bufferData.set(e,[]),this._bufferData.get(e).push(S(t))}_createFactory(e){const{geometryType:t,objectIdField:s,fields:r}=this.service,a={geometryType:t,fields:r,spatialReference:c.fromJSON(this.spatialReference)},i=new _(((e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t)),!1),{matcher:o,aggregateMatcher:n}=e.mesh;return this._store=i,this._matchers.feature=v(o,i,a),this._matchers.aggregate=l(n,(e=>v(e,i,a))),new j(t,s,i)}async _onTileData(e,t,s,r){const{type:a,addOrUpdate:i,remove:o}=t,n=t.end;if(!i){const t={type:a,addOrUpdate:null,remove:o,clear:!1,end:n};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const c=this._processFeatures(e,i,s,r);try{const s=await c;if(d(s)){const t={type:a,addOrUpdate:null,remove:o,clear:!1,end:n};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}for(const t of s)e.key.id!==t.message.tileKey&&this._addBufferData(e.key.id,t);await m(s.map((s=>{const i=e.key.id===s.message.tileKey,o=i?t.remove:[],n=i&&t.end;return this._updateTileMesh(a,e,s,o,n,t.clear,r.signal)})))}catch(l){this._handleError(e,l,r)}}async _updateTileMesh(e,t,s,r,a,i,n){const c=e,d=s.message.tileKey;d!==t.key.id&&(a=!1);const m=l(s,(e=>e.message)),f=l(s,(e=>e.transferList))||[],u={type:c,addOrUpdate:m,remove:r,clear:!1,end:a},p={transferList:h(f)||[],signal:n};return o(p),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:d,data:u},p)}async _processFeatures(e,t,s,r){if(d(t)||!t.hasFeatures)return null;const a={transform:e.transform,hasZ:!1,hasM:!1},i=this._factory,n={viewingMode:"",scale:e.scale},c=await this._matchers.feature,l=await this._matchers.aggregate;o(r);const m=this._getLabelInfos(e,t);return await i.analyze(t.getCursor(),c,l,a,n),o(r),this._writeFeatureSet(e,t,a,m,i,s)}_writeFeatureSet(e,t,s,r,a,i){const o=t.getApproximateSize(),c="simple"===this._schema.mesh.matcher.type&&this._schema.mesh.matcher.isDotDensity,l=new D(e.key.id,{features:o,records:o,metrics:0},c,i,!0),d={viewingMode:"",scale:e.scale},m=t.getCursor();for(;m.next();)try{const t=m.getDisplayId(),i=n(r)?r.get(t):null;a.writeCursor(l,m,s,d,e.level,i)}catch(h){}const f=e.tileInfoView.tileInfo.isWrappable;return l.serialize(f)}_handleError(e,t,s){if(!f(t)){const r={tileKey:e.id,error:t.message};return this.remoteClient.invoke("tileRenderer.onTileError",r,{signal:s.signal})}}_getLabelInfos(e,t){const s=this._schema.mesh.labels,r=l(s,(t=>t.filter((t=>function(e,t){return(!e.minScale||e.minScale>=t)&&(!e.maxScale||e.maxScale<=t)}(t,e.scale)))));if(d(r)||0===r.length)return null;const a=new Map,i=(new y(u),t.getCursor());for(;i.next();){const e=i.getDisplayId(),t=[],s=w(e),o=s&&1!==i.readAttribute("cluster_count")?"aggregate":"feature";for(const a of r){if(a.target!==o)continue;const r=i.getStorage(),n=s&&"feature"===o?r.getComputedStringAtIndex(i.readAttribute("referenceId"),a.fieldIndex):r.getComputedStringAtIndex(e,a.fieldIndex);if(!n)continue;const c=p(n.toString()),l=c[0],d=c[1];this._store.getMosaicItem(a.symbol,k(l)).then((e=>{t[a.index]={glyphs:e.glyphMosaicItems,rtl:d,index:a.index}}))}a.set(e,t)}return a}_shouldDiscard(e,t){switch(this.service.geometryType){case"esriGeometryPoint":{const s=t.readLegacyPointGeometry();return!s||e.checkOverlap(s.x,s.y)}case"esriGeometryPolygon":{const s=t.readLegacyCentroid();return!s||e.checkOverlap(s.x,s.y)}default:return!1}}_markUsed(e,t){switch(this.service.geometryType){case"esriGeometryPoint":{const{x:s,y:r}=t.readLegacyPointGeometry();return e.markUsed(s,r)}case"esriGeometryPolygon":{const{x:s,y:r}=t.readLegacyCentroid();return e.markUsed(s,r)}}}};C=t([s("esri.views.2d.layers.features.processors.SymbolProcessor")],C);var x=C;export default x;
