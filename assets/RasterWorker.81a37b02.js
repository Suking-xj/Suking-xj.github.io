import{cr as e}from"./vendor.74d5941c.js";import{u as r,r as s,U as o,p as t,C as i}from"./pixelUtils.5399eb4b.js";import{T as m,N as l}from"./RasterSymbolizer.07b5503f.js";import"./_commonjsHelpers.f2a458db.js";import"./LercCodec.7b2d60e1.js";export default class{async decode(e){const r=await m(e.data,e.options);return r&&r.toJSON()}symbolize(s){s.pixelBlock=r.fromJSON(s.pixelBlock),s.extent=s.extent?e.fromJSON(s.extent):null;const o=this.symbolizer.symbolize(s);return Promise.resolve(o&&o.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=l.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(r.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(e){const o=s(r.fromJSON(e.srcPixelBlock));return Promise.resolve(o)}split(e){const s=o(r.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return s&&s.forEach(((e,r)=>{s.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map((e=>e?new r(e):null)),o=t(s,e.srcMosaicSize);if(!e.coefs)return o&&o.toJSON();const m=i(o,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return m&&m.toJSON()}}
