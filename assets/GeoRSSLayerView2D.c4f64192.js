import{dR as e,c_ as i,d1 as s,M as t,eQ as r,aE as o,ca as a,ae as p,ag as l}from"./vendor.74d5941c.js";import{l as n,d as m}from"./LayerView2D.06dde519.js";import{e as h}from"./BaseGraphicContainer.437a7535.js";import{i as c}from"./GraphicContainer.df674785.js";import"./Container.d2c27c9d.js";import"./mat4f32.a5cabe00.js";import"./_commonjsHelpers.f2a458db.js";import"./definitions.6737c10c.js";import"./schemaUtils.ab77d03d.js";import"./MD5.1ef35834.js";import"./Utils.3f1577e5.js";import"./FramebufferObject.18518335.js";import"./MaterialKey.3bc4aaea.js";import"./visualVariablesUtils.cb58e4df.js";import"./CIMSymbolHelper.6546a069.js";import"./Rect.b51904ac.js";import"./BidiEngine.9b392b22.js";import"./WGLMeshFactory.8977e3d9.js";import"./ComputedAttributeStorage.2a55b702.js";import"./quickselect.e4940b29.js";import"./FeatureSetReader.a91e3e2d.js";import"./centroid.93c1b848.js";import"./visualVariablesUtils.bb9f81fa.js";import"./tileUtils.7f9c3912.js";import"./cimAnalyzer.0b895c7f.js";import"./TurboLine.ecd76861.js";import"./GeometryUtils.9c8423f5.js";import"./projectionSupport.62084d5a.js";import"./json.7989af9b.js";import"./VertexArrayObject.67803418.js";import"./FeatureContainer.3e3899c9.js";import"./TileContainer.763b6c09.js";import"./WGLContainer.74815466.js";import"./vec4f32.6de15d07.js";import"./ShaderCompiler.b19da10d.js";import"./earcut.0e5467f0.js";let y=class extends(n(m)){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}hitTest(e,i){if(this.suspended||!this.graphicsViews.length)return Promise.resolve(null);const s=this.graphicsViews.reverse().map((s=>s.hitTest(e,i)));return Promise.all(s).then((e=>e.filter(((e,i)=>(e&&(e.popupTemplate=this._popupTemplates.get(this.graphicsViews[i]),e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))}update(e){if(this.graphicsViews)for(const i of this.graphicsViews)i.processUpdate(e)}attach(){this.layer.featureCollections.forEach((o=>{const a=e.fromJSON(o.featureSet),p=new(i.ofType(s))(a.features);let l;if(this._graphicsViewMap[a.geometryType])l=this._graphicsViewMap[a.geometryType],l.graphics.addMany(p);else{const e=o.layerDefinition.drawingInfo,i=o.popupInfo?t.fromJSON(o.popupInfo):null,s=r(e.renderer);l=new h({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:s,container:new c(this.view.featuresTilingScheme)}),this._graphicsViewMap[a.geometryType]=l,this._popupTemplates.set(l,i),"polygon"!==a.geometryType||this.layer.polygonSymbol?"polyline"!==a.geometryType||this.layer.lineSymbol?"point"!==a.geometryType||this.layer.pointSymbol||(this.layer.pointSymbol=s.symbol):this.layer.lineSymbol=s.symbol:this.layer.polygonSymbol=s.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}})),this.handles.add([o(this.layer,"polygonSymbol",(e=>{this._graphicsViewMap.polygon.renderer=new a({symbol:e})})),o(this.layer,"lineSymbol",(e=>{this._graphicsViewMap.polyline.renderer=new a({symbol:e})})),o(this.layer,"pointSymbol",(e=>{this._graphicsViewMap.point.renderer=new a({symbol:e})}))])}detach(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this.graphicsViews.length=0}moveStart(){}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}};y=p([l("esri.views.2d.layers.GeoRSSLayerView2D")],y);var d=y;export default d;
